#Если Сервер Или ВнешнееСоединение Или ТолстыйКлиентОбычноеПриложение Тогда
	
#Область ОбработчикиСобытий

&После("ПередЗаписью")
Процедура Пр_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	
	РазработкаПоЧасам = Пр_КорпоративнаяСистемаGitLabВстраиваниеУНФСервер.НоменклатураРазработкаПоЧасам();
	
	Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пр_Проект, "Договор", Истина);
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "Владелец, ВидЦенКонтрагента", Истина);
	
	ВидЦенКонтрагента = РеквизитыДоговора.ВидЦенКонтрагента;
	Если Не ЗначениеЗаполнено(ВидЦенКонтрагента) Тогда      
		СтруктураВидаЦен = Новый Структура("Контрагент, Проект", РеквизитыДоговора.Владелец, Пр_Проект);
		ВидЦенКонтрагента = Справочники.ВидыЦенКонтрагентов.СоздатьВидЦенКонтрагента(СтруктураВидаЦен,
																					 Константы.ВалютаУчета.Получить()); 
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);																			 
		Попытка
			ДоговорОбъект = Договор.ПолучитьОбъект();
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ДоговорыКонтрагентов");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Договор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			ДоговорОбъект.ВидЦенКонтрагента = ВидЦенКонтрагента;
			ДоговорОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю("ru = 'Не удалось создать автоматически новый вид цен контрагента'",,,,Отказ);
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних(
		|			&ДатаДокумента,
		|			ВидЦенКонтрагента = &ВидЦенКонтрагента
		|				И Номенклатура = &РазработкаПоЧасам) КАК Т";
	
	Запрос.УстановитьПараметр("ВидЦенКонтрагента", ВидЦенКонтрагента);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	Запрос.УстановитьПараметр("РазработкаПоЧасам", РазработкаПоЧасам);
	Выборка = Запрос.Выполнить().Выбрать(); 	
	
	Если Выборка.Следующий() Тогда
		ЦенаЧас = Выборка.Цена;	
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Необходимо указать цену разработки по часам для текущего вида цен'"),,,,Отказ);
		Возврат;
	КонецЕсли;
	
	СтарыйКомментарий = "";
	Если Работы.Количество() Тогда
		СтарыйКомментарий = Работы[0].Комментарий;
	КонецЕсли;
	
	Работы.Очистить();
	СтрокаРабот = Работы.Добавить();
	СтрокаРабот.Номенклатура = РазработкаПоЧасам;
	СтрокаРабот.Заказчик = Договор; 
	СтрокаРабот.Трудоемкость = Пр_ФактВGitLab;
	СтрокаРабот.Цена = ЦенаЧас;
	СтрокаРабот.Сумма = СтрокаРабот.Трудоемкость * СтрокаРабот.Цена;
	Комментарий = СтрШаблон(НСтр("ru = 'Разработка по часам за %1'"),
										Формат(Дата, "ДФ='MMMM yyyy'"));
	СтрокаРабот.ДатаНачала = Дата;
	КоличествоПолныхДней = Цел(Пр_ФактВGitLab / 8);    
	ОстатокВЧасах = Пр_ФактВGitLab - 8 * КоличествоПолныхДней;
	СтрокаРабот.ДатаОкончания = Дата + (КоличествоПолныхДней * 24*60*60) + ОстатокВЧасах * 3600;
	СтрокаРабот.Комментарий = СтарыйКомментарий;
	
	СуммаДокумента = СтрокаРабот.Сумма;
	
КонецПроцедуры

&После("ПриЗаписи")
Процедура Пр_ПриЗаписи(Отказ)
	
	Если ДополнительныеСвойства.Свойство("ЭтоНовый")
		 И ДополнительныеСвойства.ЭтоНовый
	Тогда
	
		Если ДополнительныеСвойства.Свойство("ЭтоЗагрузкаДанных") И
			 ДополнительныеСвойства.ЭтоЗагрузкаДанных
		Тогда
			// ничего не делаем
		Иначе
			Узел = ПланыОбмена.Пр_ОбменGitLab.НайтиПоКоду("GitLab");
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&После("ОбработкаПроведения")
Процедура Пр_ОбработкаПроведения(Отказ, РежимПроведения)
				
	СотрудникБэклог = Пр_КорпоративнаяСистемаGitLabВстраиваниеУНФСервер.СтруктураПользователяБэклог().Сотрудник; 
	Если Сотрудник <> СотрудникБэклог Тогда
		Движения.Пр_ПланФактовоеОтклонение.Записывать = Истина;
		Движения.Пр_ПланФактовоеОтклонение.Очистить();
		Движения.Пр_ПланФактовоеОтклонение.Записать();

		Движение = Движения.Пр_ПланФактовоеОтклонение.Добавить();
		Движение.Регистратор = Ссылка;  
		Движение.Проект = Пр_Проект;
		Движение.Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пр_Проект, "Контрагент", Истина); 
		Движение.ЗаданиеНаРаботу = Ссылка;
		Движение.Разработчик = Сотрудник;
		Движение.ПлановыеЗатраты = Пр_ОценкаВGitLab;
		Движение.ФактическиеЗатраты = Пр_ФактВGitLab; 
		Движение.Разница = Движение.ПлановыеЗатраты - Движение.ФактическиеЗатраты;
		
		Движения.Пр_ПланФактовоеОтклонение.Записывать = Истина;
	КонецЕсли;
	
КонецПроцедуры

&ИзменениеИКонтроль("ОбработкаЗаполнения")
Процедура Пр_ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("Структура")] = "ЗаполнитьПоСтруктуре";
	СтратегияЗаполнения[Тип("ДокументСсылка.Событие")] = "ЗаполнитьПоСобытию";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказуПокупателя";
	
	#Вставка
	Если ДанныеЗаполнения = Неопределено Тогда	
		
		ДанныеЗаполнения = Новый Структура;	  
		
		СтруктурнаяЕдиницаПрограммисты = Пр_КорпоративнаяСистемаGitLabВстраиваниеУНФСервер.СтруктурнаяЕдиницаПрограммисты();
		ДанныеЗаполнения.Вставить("СтруктурнаяЕдиница", СтруктурнаяЕдиницаПрограммисты);         
		
		СтруктураПользователяБэклог = Пр_КорпоративнаяСистемаGitLabВстраиваниеУНФСервер.СтруктураПользователяБэклог();
		ДанныеЗаполнения.Вставить("Сотрудник", СтруктураПользователяБэклог.Сотрудник);
				
	КонецЕсли;    
	#КонецВставки
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения, "Состояние");

	Если Работы.Количество() = 0 Тогда
		Работы.Добавить();
	КонецЕсли;

	ДозаполнитьПоУмолчанию();

КонецПроцедуры

#КонецОбласти

#КонецЕсли