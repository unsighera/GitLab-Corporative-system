#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПерезаполнитьТЗ(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтборов(Элемент)
	ПриИзмененииОтборовСервер();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Предпросмотр(Команда)
	
	ТабДок = ЗаполнитьМакетСервер();
	ТабДок.Защита = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументы(Команда)
	
	ДлительнаяОперация = НачатьФормированиеДокументов();

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("ПриЗавершенииФормированияДокументов", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
  
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура обертка для перезаполнения ТЗ
//
&НаСервере
Процедура ПриИзмененииОтборовСервер()
	ПерезаполнитьТЗ(ЭтотОбъект);	
КонецПроцедуры

// Функция обертка для заполнения макета
//
&НаСервере
Функция ЗаполнитьМакетСервер()
	ТабДок = ЗаполнитьМакет(ЭтотОбъект);
	Возврат ТабДок;
КонецФункции

// Перезаполняет ТЗ с заданиями на работу
//
// Параметры:
// ЭтотОбъект - ФормаКлиентскогоПриложения
//
&НаСервереБезКонтекста
Процедура ПерезаполнитьТЗ(ЭтотОбъект) 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаписиКалендаряСотрудника.Источник КАК ЗаданиеНаРаботу
		|ПОМЕСТИТЬ ВТ_ЗаданияНаРаботу
		|ИЗ
		|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КолонкиКалендарейСотрудников КАК КолонкиКалендарейСотрудников
		|		ПО ЗаписиКалендаряСотрудника.КолонкаКалендаря = КолонкиКалендарейСотрудников.Ссылка
		|ГДЕ
		|	НЕ ЗаписиКалендаряСотрудника.ПометкаУдаления
		|	И КолонкиКалендарейСотрудников.Наименование = &ИмяКолонкиГотово
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаданиеНаРаботу
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИСТИНА КАК Использовать,
		|	Т.ЗаданиеНаРаботу КАК ЗаданиеНаРаботу,
		|	З.Дата КАК Дата,
		|	З.Пр_Проект КАК Проект,
		|	П.Контрагент КАК Контрагент
		|ИЗ
		|	ВТ_ЗаданияНаРаботу КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаРаботу КАК З
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК П
		|			ПО З.Пр_Проект = П.Ссылка
		|		ПО Т.ЗаданиеНаРаботу = З.Ссылка
		|ГДЕ
		|	(&НеИспользоватьПериод
		|			ИЛИ З.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
		|	И (&НеИспользоватьКонтрагент
		|			ИЛИ П.Контрагент = &Контрагент)
		|	И (&НеИспользоватьПроект
		|			ИЛИ П.Ссылка = &Проект)
		|	И З.Состояние <> ЗНАЧЕНИЕ(Справочник.СостоянияСобытий.Завершено)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент,
		|	Проект,
		|	ЗаданиеНаРаботу,
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ЗаданияНаРаботу";
	
	Запрос.УстановитьПараметр("ИмяКолонкиГотово", НСтр("ru = 'Готово'"));
	Запрос.УстановитьПараметр("НеИспользоватьПериод", НЕ ЗначениеЗаполнено(ЭтотОбъект.ПериодФормирования.ДатаНачала)
													  И НЕ ЗначениеЗаполнено(ЭтотОбъект.ПериодФормирования.ДатаОкончания));
	Запрос.УстановитьПараметр("НачалоПериода", ЭтотОбъект.ПериодФормирования.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ЭтотОбъект.ПериодФормирования.ДатаОкончания);
	Запрос.УстановитьПараметр("НеИспользоватьКонтрагент", Не ЗначениеЗаполнено(ЭтотОбъект.Контрагент));
	Запрос.УстановитьПараметр("НеИспользоватьПроект", Не ЗначениеЗаполнено(ЭтотОбъект.Проект));
	Запрос.УстановитьПараметр("Контрагент", ЭтотОбъект.Контрагент);
	Запрос.УстановитьПараметр("Проект", ЭтотОбъект.Проект);
	
	Результат = Запрос.Выполнить();
	ЭтотОбъект.ТЗДокументов.Загрузить(Результат.Выгрузить());
	
КонецПроцедуры

// Заполняет макет предпросмотра сформированных документов
//
// Параметры:
// ЭтотОбъект - ФормаКлиентскогоПриложения
//
// Возвращаемое значение:
// ТабличныйДокумент
//
&НаСервереБезКонтекста
Функция ЗаполнитьМакет(Знач ЭтотОбъект)

	ТабДок = Новый ТабличныйДокумент;
	Макет = Обработки.Пр_ФормированиеПакетаДокументов.ПолучитьМакет("Пр_ПФ_MXL_ПредпросмотрСформированныхДокументов");
	
	Область = Макет.ПолучитьОбласть("Шапка");
	ТабДок.Вывести(Область);
	
	Строки = ЭтотОбъект.ТЗДокументов.Выгрузить().НайтиСтроки(Новый Структура("Использовать", Истина));
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	МассивДокументов = Новый Массив;
	Для Каждого СтрокаТЧ Из Строки Цикл	
		МассивДокументов.Добавить(СтрокаТЧ.ЗаданиеНаРаботу);		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ 
		|	Т.Номенклатура КАК Номенклатура,
		|	Т.Ссылка.Дата КАК Дата,
		|	Т.Трудоемкость КАК Количество,
		|	Т.Цена КАК Цена,
		|	Т.Сумма КАК Стоимость
		|ИЗ
		|	Документ.ЗаданиеНаРаботу.Работы КАК Т
		|ГДЕ
		|	Т.Ссылка В (&МассивДокументов)";
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбластьСтрока.Параметры.Заполнить(Выборка);   
		ОбластьСтрока.Параметры.Дата = Формат(Выборка.Дата, "ДФ='MMMM yyyy'");
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

// Функция старта длительной операции
//
// Возвращаемое значение:
// см. ДлительныеОперации.ВыполнитьФункцию()
//
&НаСервере
Функция НачатьФормированиеДокументов()

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	МассивДокументов = Новый Массив;
	ВыбранныеСтроки = ТЗДокументов.НайтиСтроки(Новый Структура("Использовать", Истина));
	Для Каждого Строка Из ВыбранныеСтроки Цикл
		МассивДокументов.Добавить(Строка.ЗаданиеНаРаботу);	
	КонецЦикла;
	
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения,
	"Обработка.Пр_ФормированиеПакетаДокументов.МодульОбъекта.СформироватьДокументы",
	МассивДокументов);

КонецФункции

// Обработка результата выполнения фонового задания
//
// Параметры:
// Результат - см. ДлительныеОперацииКлиент.НовыйРезультатДлительнойОперации
// ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ПриЗавершенииФормированияДокументов(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	Если Результат.Статус = "Ошибка" Тогда 
		
		ПоказатьПредупреждение(,Результат.ПодробноеПредставлениеОшибки,,
							   НСтр("ru = 'Ошибка при формировании документов'"));
		Возврат;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти