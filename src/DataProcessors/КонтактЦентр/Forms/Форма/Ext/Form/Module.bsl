#Область ОбработчикиСобытий

&НаКлиенте
Процедура Пр_ПереключательПриИзмененииПосле(Элемент)

	Если ВидыКонтактЦентра = 5 Тогда 
		ОбновитьЛимитыКолонокКалендаря();
	КонецЕсли;	
   
КонецПроцедуры     

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
&ИзменениеИКонтроль("Подключаемый_Перетаскивание")
Процедура Пр_Подключаемый_Перетаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	СтандартнаяОбработка = Ложь;
	Индекс = ИндексЭлемента(Элемент.Имя);
	КолонкаКалендаря = КолонкиТекущейДоски[Индекс].Ссылка;

	Если ПараметрыПеретаскивания.Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПеретаскивания.Значение.Вставить("Колонка",КолонкаКалендаря);
	
	#Вставка
	ЛимитыПоКолонкам = ПолучитьЛимитыКолонокТекущейДоски(КолонкиТекущейДоски);
	ЭлементСоответсвия = ЛимитыПоКолонкам.Получить(КолонкаКалендаря);
	Если ЭлементСоответсвия <> Неопределено Тогда
		Если ЭлементСоответсвия.МаксимальноеКоличество <> 0
			 И ЭлементСоответсвия.ТекущееКоличество = ЭлементСоответсвия.МаксимальноеКоличество
		Тогда 
			Шаблон = НСтр("ru = 'По колонке %1 превышен VIP лимит!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, КолонкаКалендаря);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения); 
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	#КонецВставки
	
	ОбновитьКолонкуЗаписиКалендаря(ПараметрыПеретаскивания.Значение, Элемент.Имя);

	Для Каждого СписокКолонки Из КолонкиТекущейДоски Цикл
		Индекс = КолонкиТекущейДоски.Индекс(СписокКолонки);
		Элементы["СписокДел_"+Индекс].ВыделенныеСтроки.Очистить();
	КонецЦикла;

	ТекущийЭлемент = Элемент;
	Элемент.ТекущаяСтрока = Новый КлючСтрокиДинамическогоСписка("ЗаписьКалендаря, Ссылка",
	ПараметрыПеретаскивания.Значение.ЗаписьКалендаря,
	ПараметрыПеретаскивания.Значение.Значение);

	ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),
	ПолучитьНавигационнуюСсылку(ПараметрыПеретаскивания.Значение.Значение),
	СтрШаблон(НСтр("ru='%1'"),ПараметрыПеретаскивания.Значение.Значение),
	БиблиотекаКартинок.Информация32); 
	
	#Вставка
	ОбновитьЛимитыКолонокКалендаря(); 
	Пр_ОбменGitLabКлиент.ОтправитьIssue(ПараметрыПеретаскивания.Значение.Значение);
	#КонецВставки
	
КонецПроцедуры

&НаКлиенте
&После("Подключаемый_ЗаголовокДоскиНажатие")
Процедура Пр_Подключаемый_ЗаголовокДоскиНажатие(Элемент)

	ОбновитьЛимитыКолонокКалендаря();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает в заголовое колонок установленные лимиты
//
&НаКлиенте
Процедура ОбновитьЛимитыКолонокКалендаря()
	
	ЛимитыПоКолонкам = ПолучитьЛимитыКолонокТекущейДоски(КолонкиТекущейДоски);
	
	Для Каждого Колонка Из КолонкиТекущейДоски Цикл
		
		ЭлементСоответствия = ЛимитыПоКолонкам.Получить(Колонка.Ссылка);
		Если ЭлементСоответствия = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементСоответствия.МаксимальноеКоличество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Шаблон = "ДекорацияЗаголовокЗадачи_[ИндексКолонки]";
		ШаблонЛимита = "[ИмяКолонки] ([ТекущееКоличество]/[МаксимальноеКоличество])";
		ЗаголовокКолонкиИмя = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, Новый Структура("ИндексКолонки", КолонкиТекущейДоски.Индекс(Колонка)));
		Элементы[ЗаголовокКолонкиИмя].Заголовок = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонЛимита,
																										   Новый Структура("ИмяКолонки, ТекущееКоличество, МаксимальноеКоличество",
																										   Строка(Колонка.Ссылка),
																										   ЭлементСоответствия.ТекущееКоличество,
																										   ЭлементСоответствия.МаксимальноеКоличество));
		
	КонецЦикла;

	
КонецПроцедуры

// Получает лимиты по колонкам текущей доски
//
// Параметры:
// КолонкиТекущейДоски - ТаблицаЗначений
//  * Ссылка - СправочникСсылка.КолонкиКалендарейСотрудников 
//	
// Возвращаемое значение:
// Соответствие
//  * Ключ - СправочникСсылка.КолонкиКалендарейСотрудников
//	* Значение - Структура
//		* МаксимальноеКоличество - Число
//		* ТекущееКоличество - Число
//
&НаСервереБезКонтекста
Функция ПолучитьЛимитыКолонокТекущейДоски(Знач КолонкиТекущейДоски)
	
	ЛимитыПоКолонкам = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	К.Ссылка КАК Колонка
		|ПОМЕСТИТЬ ВТ_Колонки
		|ИЗ 
		|	&КолонкиТекущейДоски КАК К
		|ИНДЕКСИРОВАТЬ ПО
		|	Колонка
		|;
		|
		|////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	К.Колонка КАК Колонка,
		|	Л.Лимит КАК МаксимальноеКоличество
		|ПОМЕСТИТЬ ВТ_МаксимальныйЛимит
		|ИЗ 
		|	ВТ_Колонки КАК К
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Пр_ЛимитыПоКолонкам КАК Л
		|		ПО К.Колонка = Л.Колонка
		|ИНДЕКСИРОВАТЬ ПО
		|	Колонка
		|;
		|
		|////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Колонки
		|;
		|
		|////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	З.КолонкаКалендаря КАК Колонка,
		|	КОЛИЧЕСТВО(З.Ссылка) КАК ТекущееКоличество
		|ПОМЕСТИТЬ ВТ_ТекущийЛимит
		|ИЗ
		|	Справочник.ЗаписиКалендаряСотрудника КАК З
		|ГДЕ
		|	З.КолонкаКалендаря В (ВЫБРАТЬ
		|						      Т.Колонка
		|						  ИЗ
		|						      ВТ_МаксимальныйЛимит КАК Т)
		|	И НЕ З.ПометкаУдаления 
		|
		|СГРУППИРОВАТЬ ПО
		|	З.КолонкаКалендаря 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Колонка
		|;   
		|
		|/////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	М.Колонка КАК Колонка,
		|	ЕСТЬNULL(М.МаксимальноеКоличество, 0) КАК МаксимальноеКоличество,
		|	ЕСТЬNULL(Т.ТекущееКоличество, 0) КАК ТекущееКоличество
		|ИЗ
		|	ВТ_МаксимальныйЛимит КАК М
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущийЛимит КАК Т
		|		ПО М.Колонка = Т.Колонка
		|;
		|
		|//////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ТекущийЛимит
		|;
		|
		|//////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_МаксимальныйЛимит";
	
	Запрос.УстановитьПараметр("КолонкиТекущейДоски", КолонкиТекущейДоски.Выгрузить());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЛимитыПоКолонкам.Вставить(Выборка.Колонка, Новый Структура("ТекущееКоличество, МаксимальноеКоличество",
																   Выборка.ТекущееКоличество,
																   Выборка.МаксимальноеКоличество));	
	КонецЦикла;  
															   
	Возврат ЛимитыПоКолонкам;
		
КонецФункции	

#КонецОбласти
