#Если Сервер Или ВнешнееСоединение Или ТолстыйКлиентОбычноеПриложение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает структуру со значениям физ лица, сотрудника, пользователя Бэклог
// Примечание: Бэклог - временный исполнитель issue до распределения заданий в GitLab
//
// Возвращаемое значение:
// Структура
//	* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//	* Пользователь - СправочникСсылка.Пользователи
//	* Сотрудник - СправочникСсылка.Сотрудники
//
Функция СтруктураПользователяБэклог() Экспорт

	Запрос = Новый Запрос;           
	
	УстановитьПривилегированныйРежим(Истина); 
	
	Запрос.Текст = ТекстЗапросаФизическиеЛица();
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		НовыйФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
		НовыйФизЛицо.Наименование = "Бэклог";
		НовыйФизЛицо.Записать();   
		ФизическоеЛицо = НовыйФизЛицо.Ссылка;

	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ФизическоеЛицо = Выборка.ФизическоеЛицо;
		
	КонецЕсли;

	
	Запрос.Текст = ТекстЗапросаПользователи();
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
		НовыйПользователь.Наименование = "Бэклог"; 	
		НовыйПользователь.ФизическоеЛицо = ФизическоеЛицо;
		НовыйПользователь.Недействителен = Ложь;
		НовыйПользователь.Служебный = Истина;
		
		ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
		ОписаниеПользователяИБ.Имя = "Бэклог";
		ОписаниеПользователяИБ.ПолноеИмя = "Бэклог";
		ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
		ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		НовыйПользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		НовыйПользователь.Записать();  
		
		Пользователь = НовыйПользователь.Ссылка;
		
		ГруппаДоступаНовогоПользователя = Справочники.ГруппыДоступа.Администраторы;
		
		НачатьТранзакцию();
		Попытка                                  
			
			ГруппаДоступаНовогоПользователяОбъект = ГруппаДоступаНовогоПользователя.ПолучитьОбъект();
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ГруппыДоступа");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ГруппаДоступаНовогоПользователя);
			Блокировка.Заблокировать();
			
			ГруппаДоступаНовогоПользователяОбъект.Пользователи.Добавить().Пользователь = НовыйПользователь;
			ГруппаДоступаНовогоПользователяОбъект.Записать(); 
			
			ЗафиксироватьТранзакцию();
			
		Исключение 
			
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
		КонецПопытки;  
		
	Иначе 
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Пользователь = Выборка.Пользователь;
		
	КонецЕсли;
		
	Запрос.Текст = ТекстЗапросаСотрудники();
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		
		НовыйСотрудник = Справочники.Сотрудники.СоздатьЭлемент();
		НовыйСотрудник.Наименование = "Бэклог";
		НовыйСотрудник.Физлицо = ФизическоеЛицо; 
		НовыйСотрудник.ФизическоеЛицо = ФизическоеЛицо;
		НовыйСотрудник.Записать(); 
		Сотрудник = НовыйСотрудник.Ссылка;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Сотрудник = Выборка.Сотрудник;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураПользователяБэклог = Новый ФиксированнаяСтруктура(
		Новый Структура("Пользователь, ФизическоеЛицо, Сотрудник", Пользователь, ФизическоеЛицо, Сотрудник)); 
		
	Возврат СтруктураПользователяБэклог;
	
КонецФункции

// Возвращает календарь сотрудника привязанный к проекту
//
// Параметры:
// Проект - СправочникСсылка.Проекты
//
// Возвращаемое значение:
// СправочникСсылка.Проекты
//
Функция КалендарьСотрудникаПоПроекту(Знач Проект) Экспорт
	
	ПроектСтрокой = Строка(Проект);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	КалендариСотрудников.Ссылка КАК КалендарьСотрудника
		|ИЗ
		|	Справочник.КалендариСотрудников КАК КалендариСотрудников
		|ГДЕ
		|	КалендариСотрудников.Наименование = &Проект
		|	И НЕ КалендариСотрудников.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Проект", ПроектСтрокой);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		СтруктураПользователяБэклог = СтруктураПользователяБэклог();
		НовыйКалендарь = Справочники.КалендариСотрудников.СоздатьЭлемент();
		НовыйКалендарь.Наименование = ПроектСтрокой;
		НовыйКалендарь.ВладелецКалендаря = СтруктураПользователяБэклог.Сотрудник;
		НовыйКалендарь.Пользователь = СтруктураПользователяБэклог.Пользователь;
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Сотрудники.Ссылка КАК Сотрудник
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	НЕ Сотрудники.ПометкаУдаления
			|	И НЕ Сотрудники.Недействителен";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НовыйКалендарь.Доступ.Добавить().Сотрудник = Выборка.Сотрудник;	
		КонецЦикла;
		
		НовыйКалендарь.Записать();
		КалендарьСотрудника = НовыйКалендарь.Ссылка; 
		
		НоваяКолонка = Справочники.КолонкиКалендарейСотрудников.СоздатьЭлемент();
		НоваяКолонка.Наименование = НСтр("ru = 'Анализ'");
		НоваяКолонка.Владелец = КалендарьСотрудника;
		НоваяКолонка.Порядок = 1;
		НоваяКолонка.Записать();
		
		МенеджерЛимита = РегистрыСведений.Пр_ЛимитыПоКолонкам.СоздатьМенеджерЗаписи();
		МенеджерЛимита.Календарь = КалендарьСотрудника;
		МенеджерЛимита.Колонка = НоваяКолонка.Ссылка;
		МенеджерЛимита.Лимит = 4;
		МенеджерЛимита.Записать(); 
		
		НоваяКолонка = Справочники.КолонкиКалендарейСотрудников.СоздатьЭлемент();
		НоваяКолонка.Наименование = НСтр("ru = 'В работе'");
		НоваяКолонка.Владелец = КалендарьСотрудника;
		НоваяКолонка.Порядок = 2;
		НоваяКолонка.Записать();
		
		НоваяКолонка = Справочники.КолонкиКалендарейСотрудников.СоздатьЭлемент();
		НоваяКолонка.Наименование = НСтр("ru = 'На проверке'");
		НоваяКолонка.Владелец = КалендарьСотрудника;
		НоваяКолонка.Порядок = 3;
		НоваяКолонка.Записать();   
		
		НоваяКолонка = Справочники.КолонкиКалендарейСотрудников.СоздатьЭлемент();
		НоваяКолонка.Наименование = НСтр("ru = 'Готово'");
		НоваяКолонка.Владелец = КалендарьСотрудника;
		НоваяКолонка.Порядок = 4;
		НоваяКолонка.Записать();   
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		КалендарьСотрудника = Выборка.КалендарьСотрудника; 
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат КалендарьСотрудника;

КонецФункции

// Возвращает структурную единицу с наименованием "Программисты" для заполнения автоматического 
// Заполнения поля 'Подразделение' \ 'Структурная единица в документах' значением функции
//
// Возвращаемое значение:
// СправочникСсылка.СтруктурныеЕдиницы
//
Функция СтруктурнаяЕдиницаПрограммисты() Экспорт       
	
	НаименованиеПодразделения = НСтр("ru = 'Программисты'");
	Программисты = Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию(НаименованиеПодразделения, Истина);
	
	Если Программисты = Неопределено
		 Или Программисты = Справочники.СтруктурныеЕдиницы.ПустаяСсылка()
	Тогда
	
		НовоеПодразделение = Справочники.СтруктурныеЕдиницы.СоздатьЭлемент(); 
		НовоеПодразделение.Наименование = НаименованиеПодразделения;
		НовоеПодразделение.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Подразделение;
		НовоеПодразделение.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		НовоеПодразделение.РозничныйВидЦен = Справочники.ВидыЦен.Учетная;
		НовоеПодразделение.НаименованиеПолное = НаименованиеПодразделения;
		НовоеПодразделение.Записать();
		
		Программисты = НовоеПодразделение.Ссылка;
		
	КонецЕсли;
	
	Возврат Программисты; 
	
КонецФункции

// Возвращает строковое представление текущего статуса
// В случае отсутствия статуса возвращает значение 'Необработанное'
//
// Параметры:
// ЗаданиеНаРаботу - ДокументСсылка.ЗаданиеНаРаботу
//
// Возвращаемое значение:
// Строка
//
Функция СтатусЗаданияНаРаботу(Знач ЗаданиеНаРаботу) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПРЕДСТАВЛЕНИЕ(ЗаписиКалендаряСотрудника.КолонкаКалендаря) КАК КолонкаКалендаря
		|ИЗ
		|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
		|ГДЕ
		|	ЗаписиКалендаряСотрудника.Источник = &ЗаданиеНаРаботу
		|	И НЕ ЗаписиКалендаряСотрудника.ПометкаУдаления";
	Запрос.УстановитьПараметр("ЗаданиеНаРаботу", ЗаданиеНаРаботу);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КолонкаКалендаря;
	КонецЕсли;
	
	Возврат НСтр("ru = 'Необработанное'")
	
КонецФункции

// Возвращает основную номенклатуру - Разработка по часам
//
// Возвращаемое значение:
// СправочникСсылка.Номенклатура
//
Функция НоменклатураРазработкаПоЧасам() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Т
		|ГДЕ
		|	Т.Наименование = ""Разработка по часам""";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда        
		
		НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();    
		НоваяНоменклатура.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ч; 
		НоваяНоменклатура.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.Общая;
		НоваяНоменклатура.КатегорияНоменклатуры = Справочники.КатегорииНоменклатуры.НайтиПоНаименованию(НСтр("ru = 'Работы и услуги'"), Истина);
		НоваяНоменклатура.НаправлениеДеятельности = Справочники.НаправленияДеятельности.Прочее;
		НоваяНоменклатура.ПризнакПредметаРасчета = Перечисления.ПризнакиПредметаРасчета.Услуга; 
		НоваяНоменклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;
		НоваяНоменклатура.СчетУчетаЗапасов = ПланыСчетов.Управленческий.СырьеИМатериалы;
		НоваяНоменклатура.СчетУчетаЗатрат = ПланыСчетов.Управленческий.НайтиПоКоду("20.01");
		НоваяНоменклатура.СчетУчетаНДСПоПриобретеннымЦенностям = ПланыСчетов.Управленческий.НДСПоПриобретеннымЦенностям;
		НоваяНоменклатура.СчетУчетаНДСПоРеализации = ПланыСчетов.Управленческий.НайтиПоКоду("90.03");
		НоваяНоменклатура.Записать();
		
		Номенклатура = НоваяНоменклатура.Ссылка;   
		
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Номенклатура = Выборка.Номенклатура;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Номенклатура;
	
КонецФункции

// Возвращает основноой счет расчетов с программистами
//
// Возвращаемое значение:
// ПланСчетовСсылка.Управленческий
//
Функция СчетРасчетаСПрограммистами() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СчетРасчетов = ПланыСчетов.Управленческий.НайтиПоКоду("90.08.99");
	Если СчетРасчетов = Неопределено Или СчетРасчетов = ПланыСчетов.Управленческий.ПустаяСсылка() Тогда
		
		НовыйСчет = ПланыСчетов.Управленческий.СоздатьСчет();
		НовыйСчет.Наименование = НСтр("ru = 'Зарплата программистов'");   
		НовыйСчет.Код = "90.08.99";
		НовыйСчет.Родитель = ПланыСчетов.Управленческий.УправленческиеРасходы;
		НовыйСчет.ТипСчета = Перечисления.ТипыСчетов.Расходы;
		НовыйСчет.СпособРаспределения = Перечисления.БазыРаспределенияРасходов.ПрямыеЗатраты;
		НовыйСчет.Вид = ВидСчета.Активный;	
		НовыйСчет.Записать();
		СчетРасчетов = НовыйСчет.Ссылка;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СчетРасчетов;
	
КонецФункции    

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Текст запроса к справочнику пользователи для нахождения пользователя Бэклог
//
// Возвращаемое значение:
// Строка
//
Функция ТекстЗапросаПользователи()

	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Т.Ссылка КАК Пользователь
		|ИЗ
		|	Справочник.Пользователи КАК Т
		|ГДЕ
		|	Т.Наименование = ""Бэклог""";        
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст запроса к справочнику физические лица для нахождения лица Бэклог
//
// Возвращаемое значение:
// Строка
//
Функция ТекстЗапросаФизическиеЛица()

	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Т.Ссылка КАК ФизическоеЛицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК Т
		|ГДЕ
		|	Т.Наименование = ""Бэклог""";        
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст запроса к справочнику сотрудники для нахождения сотрудника Бэклог
//
// Возвращаемое значение:
// Строка
//
Функция ТекстЗапросаСотрудники()

	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Т.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.Сотрудники КАК Т
		|ГДЕ
		|	Т.Наименование = ""Бэклог""";        
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецЕсли