#Область ПрограммныйИнтерфейс

#Область ОбработчикиДляОтправкиIssueВGitLab

// Проверяет статус регистрации документа ЗаданиеНаРаботу
//
// Параметры:
// ЗаданиеНаРаботу - ДокументСсылка.ЗаданиеНаРаботу
//
// Возвращаемое значение:
// Булево
//
Функция СтатусРегистрацииЗаданияНаРаботу(Знач ЗаданиеНаРаботу) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Т.Узел КАК Узел,
		|	Т.НомерСообщения КАК НомерСообщения,
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаданиеНаРаботу.Изменения КАК Т
		|ГДЕ
		|	Т.Ссылка = &ЗаданиеНаРаботу";
	
	Запрос.УстановитьПараметр("ЗаданиеНаРаботу", ЗаданиеНаРаботу);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Получает адрес сервера GitLab
//
// Возвращаемое значение:
// Строка
Функция АдресСервераGitLab() Экспорт

	Возврат Константы.Пр_АдресСервераGitLab.Получить();
	
КонецФункции

// Помещает токен доступа проекта в безопасное хранилище
//
// Параметры:
// ЗаданиеНаРаботу - ДокументСсылка.ЗаданиеНаРаботу
//             
// Возвращаемое значение:
// Строка
//
Функция ТокенДоступаПроектаЗаданияНаРаботу(Знач ЗаданиеНаРаботу) Экспорт

	Если Не ЗначениеЗаполнено(ЗаданиеНаРаботу) Тогда
		Возврат "";
	КонецЕсли;
	
	Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаданиеНаРаботу, "Пр_Проект", Истина);
	Если Не ЗначениеЗаполнено(Проект) Тогда
		ЗаписьОшибокОтправки(НСтр("ru = 'Отправка Issue'"),
							 НСтр("ru = 'Не удалось получить токен доступа проекта'"),
							 ЗаданиеНаРаботу);
		Возврат "";
	КонецЕсли;
	
	ТокенДоступа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "Пр_ТокенДоступа", Истина);
	
	Если ПустаяСтрока(СокрЛП(ТокенДоступа)) Тогда
		ЗаписьОшибокОтправки(НСтр("ru = 'Отправка Issue'"),
							 НСтр("ru = 'Не удалось заполнен токен доступа проекта'"),
							 ЗаданиеНаРаботу); 
		Возврат "";
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Bearer %1", ТокенДоступа);

КонецФункции

// Формирует тело запроса issue
//
// Параметры:
// ЗаданиеНаРаботу - ДокументСсылка.ЗаданиеНаРаботу
//
// Возвращаемое значение:
// Строка
//
Функция СформироватьТелоIssue(Знач ЗаданиеНаРаботу) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗаданиеНаРаботу) Тогда
		Возврат "";
	КонецЕсли;
	
	СтруктураТела = Новый Структура;  
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Т.Ссылка.Номер КАК Номер,
		|	Т.Комментарий КАК Описание
		|ИЗ
		|	Документ.ЗаданиеНаРаботу.Работы КАК Т
		|ГДЕ
		|	Т.Ссылка = &ЗаданиеНаРаботу";   
	
	Запрос.УстановитьПараметр("ЗаданиеНаРаботу", ЗаданиеНаРаботу);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер);
		СтруктураТела.Вставить("title", СтрШаблон(НСтр("ru = 'Задание на работу %1'"), НомерДокумента));
		СтруктураТела.Вставить("description", Выборка.Описание);
		СтруктураТела.Вставить("labels", НСтр("ru = 'Анализ'"));
		
		Возврат ЗаписатьЗначениеJSON(СтруктураТела);

	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Производит лог ошибок в ЖР
//
// Параметры:
// ИмяСобытия - Строка
// Комментарий - Строка     
// ЗаданиеНаРаботу - ДокументСсылка.ЗаданиеНаРаботу
//
Процедура ЗаписьОшибокОтправки(Знач ИмяСобытия, Знач Комментарий, Знач ЗаданиеНаРаботу = Неопределено) Экспорт

	ЗаписьЖурналаРегистрации(ИмяСобытия,
							 УровеньЖурналаРегистрации.Ошибка,
							 Метаданные.Документы.ЗаданиеНаРаботу,
							 ЗаданиеНаРаботу,
							 Комментарий);

КонецПроцедуры

// Получает номер проекта задания на работу
//
// Параметры:
// ЗаданиеНаРаботу - ДокументСсылка.ЗаданиеНаРаботу
//
// Возвращаемое значение:
// Строка
//
Функция НомерПроектаЗаданияНаРаботу(Знач ЗаданиеНаРаботу) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗаданиеНаРаботу) Тогда
		Возврат "";
	КонецЕсли;
	
	Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаданиеНаРаботу, "Пр_Проект", Истина);
	
	Если Не ЗначениеЗаполнено(Проект) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "Пр_НомерПроекта", Истина);
	
КонецФункции

// Обновляет данные ИБ по данным ответа сервера GitLab
//
// Параметры:  
// ЗаданиеНаРаботу - ДокументСсылка.ЗаданиеНаРаботу
// СтруктураОтвета - Структура
//   
// Возаращаемое значение:
// Булево
//
Функция ОбработатьОтветОтправкиIssue(Знач ЗаданиеНаРаботу, Знач СтруктураОтвета) Экспорт
	
	Если Не СтруктураОтвета.Свойство("iid") Тогда
		ЗаписьОшибокОтправки(НСтр("ru = 'Отправка Issue'"),
				 НСтр("ru = 'Не удалось отправить данные в GitLab'"),
				 ЗаданиеНаРаботу);
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторЗадания = СтруктураОтвета.iid;
	
	НачатьТранзакцию();
	Попытка                      
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаданиеНаРаботу");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЗаданиеНаРаботу);
		Блокировка.Заблокировать();
		
		ЗаданиеОбъект = ЗаданиеНаРаботу.ПолучитьОбъект();
		ЗаданиеОбъект.Пр_Идентификатор = ИдентификаторЗадания;
		ЗаданиеОбъект.Записать();
		ЗафиксироватьТранзакцию();  
		Возврат Истина;
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();  
			ЗаписьОшибокОтправки(НСтр("ru = 'Отправка Issue'"),
					 СтрШаблон(НСтр("ru = 'Не удалось обновить данные в документе. Идентификатор %1'"), ИдентификаторЗадания),
					 ЗаданиеНаРаботу);
			Возврат Ложь;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции  

// Фиксирует отправку задания на работу
//
// Параметры:
// ЗаданиеНаРаботу - ДокументСсылка.ЗаданиеНаРаботу
//
Процедура ЗафиксироватьОтправкуIssue(Знач ЗаданиеНаРаботу) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗаданиеНаРаботу) Тогда
		Возврат;
	КонецЕсли;
	
	Узел = ПланыОбмена.Пр_ОбменGitLab.НайтиПоКоду("GitLab"); 
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ЗаданиеНаРаботу);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиДляОтправкиDisscusions

// формирует тело запроса discussion
//
// Параметры:
// ЗаданиеНаРаботу - ДокументСсылка.ЗаданиеНаРаботу
// СвойстваСообщения - Структура
//	* Текст - Строка
//	* Автор - СправочникСсылка.Пользователи
//	* ДатаСообщения - Дата - ЧастиДаты.ДатаВремя
//
// Возвращаемое значение:
// Строка - передается в форме JSON
Функция СформироватьТелоDiscussion(Знач ЗаданиеНаРаботу, Знач СвойстваСообщения) Экспорт
	
	СтруктураТела = Новый Структура;
	ТекстСообщения = СвойстваСообщения.Текст;
	Для Каждого Вложение Из СвойстваСообщения.МассивВложений Цикл
		ТекстСообщения = СтрШаблон("%1 %2", ТекстСообщения, Вложение);	
	КонецЦикла;
	
	СтруктураТела.Вставить("body", Строка(ТекстСообщения));
	
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаданиеНаРаботу, "Пр_Проект, Пр_Идентификатор", Истина);
	Если Не ЗначениеЗаполнено(РеквизитыЗадания.Пр_Проект) Тогда
		Возврат "";
	КонецЕсли;
	
	ИдентификаторПроекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЗадания.Пр_Проект, "Пр_НомерПроекта", Истина);
	Если Не ЗначениеЗаполнено(ИдентификаторПроекта) Тогда
		Возврат "";
	КонецЕсли;
	
	СтруктураТела.Вставить("id", ИдентификаторПроекта);         
	Если ПустаяСтрока(РеквизитыЗадания.Пр_Идентификатор) Тогда
		Возврат "";
	КонецЕсли;
	
	СтруктураТела.Вставить("issue_iid", РеквизитыЗадания.Пр_Идентификатор); 
	СтруктураТела.Вставить("created_at", СвойстваСообщения.ДатаСообщения); 
		
	Настройки = Новый НастройкиСериализацииJSON();
    Настройки.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
    Настройки.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
    
    ЗаписьJSON = Новый ЗаписьJSON;
    ЗаписьJSON.УстановитьСтроку();
    ЗаписатьJSON(ЗаписьJSON, СтруктураТела, Настройки);
    СтрокаJSON = ЗаписьJSON.Закрыть();
    
	Возврат СтрокаJSON;
	
КонецФункции

// Создание пользователя, сотрудника, физ лица 
//
// Параметры:
// ИмяПользователя - Строка
// ДополнительныеПараметры - Структура
//
// Возвращаемое значение:
// Структура
// 	* Пользователь - СправочникСсылка.Пользователи
//	* Сотрудник - СправочникСсылка.Сотрудники
//	* ФизическоеЛицо - СправочникСсылка.ФизическоеЛицо
//
Функция СоздатьПользователяGitLabВИБ(Знач ИмяПользователя, Знач ДополнительныеПараметры = Неопределено) Экспорт

	СозданныеДанные = Новый Структура();
	
	ФизическоеЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
	ФизическоеЛицо.Наименование = ИмяПользователя; 
	ФизическоеЛицо.Записать(); 
	СозданныеДанные.Вставить("ФизическоеЛицо", ФизическоеЛицо.Ссылка);
	
	Пользователь = Справочники.Пользователи.СоздатьЭлемент();
	Пользователь.Наименование = ИмяПользователя; 	
	Пользователь.ФизическоеЛицо = ФизическоеЛицо.Ссылка;
	Пользователь.Недействителен = Ложь;

	ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
	ОписаниеПользователяИБ.Имя = ИмяПользователя;
	ОписаниеПользователяИБ.ПолноеИмя = ИмяПользователя;
	ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
	ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
	ОписаниеПользователяИБ.Вставить("Действие", "Записать");
	Пользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
	Пользователь.Записать();
	СозданныеДанные.Вставить("Пользователь", Пользователь.Ссылка);
	
	Сотрудник = Справочники.Сотрудники.СоздатьЭлемент();
	Сотрудник.Наименование = ИмяПользователя;
	Сотрудник.ФизическоеЛицо = ФизическоеЛицо.Ссылка;
	Сотрудник.Физлицо = ФизическоеЛицо.Ссылка;
	Сотрудник.Записать();
	СозданныеДанные.Вставить("Сотрудник", Сотрудник.Ссылка);
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание пользователя GitLab'"),
						 	 УровеньЖурналаРегистрации.Информация,
						 	 Метаданные.Справочники.Пользователи,
							 Пользователь.Ссылка,
						 	 НСтр("ru = 'Создан новый пользователь GitLab'")); 
							 
	Возврат СозданныеДанные;
	
КонецФункции

// Возвращает все существующие метки в GitLab
//
// Возвращаемое значение:
// Массив
// 	* Строка
//
Функция СуществующиеМетки() Экспорт

	МассивМеток = Новый Массив;
	МассивМеток.Добавить(НСтр("ru = 'Анализ'")); 
	МассивМеток.Добавить(НСтр("ru = 'В работе'"));
	МассивМеток.Добавить(НСтр("ru = 'На проверке'"));
	МассивМеток.Добавить(НСтр("ru = 'Готово'"));
	Возврат МассивМеток;
	
КонецФункции 

// Отправляет сообщение в GitLab в комментарии Issue
//
// Параметры:
// ЗаданиеНаРаботу - ДокументСсылка.ЗаданиеНаРаботу
// СвойстваСообщения - Структура 
//	* ИдентификаторОбсуждения - ИдентификаторОбсужденияСистемыВзаимодействия
//	* ИдентификаторСообщения - ИдентификаторСообщенияСистемыВзаимодействия
//	* Вложения - КоллекцияВложенийСистемыВзаимодействия
//	* Текст - Строка
//	* Автор - СправочникСсылка.Пользователи
//	* ДатаСообщения - Дата - ЧастиДаты.ДатаВремя
//
Процедура ОтправитьСообщениеGitLab(Знач ЗаданиеНаРаботу, Знач СвойстваСообщения) Экспорт

	ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка комментария Issue GitLab'"),
							 УровеньЖурналаРегистрации.Информация,
							 Метаданные.Документы.ЗаданиеНаРаботу,,
							 НСтр("ru = 'Начало операции'"));
						 
	АдресСервера = АдресСервераGitLab(); 
	УстановитьПривилегированныйРежим(Истина);
	УстановитьОтключениеБезопасногоРежима(Истина);
	Соединение = Новый HTTPСоединение(АдресСервера);
	Если ПустаяСтрока(АдресСервера) Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка комментария Issue GitLab'"),
								 УровеньЖурналаРегистрации.Информация,
								 Метаданные.Константы.Пр_АдресСервераGitLab,,
								 НСтр("ru = 'Не удалось получить адрес сервера GitLab'")); 
		ЛогированиеНеОтправленныхСообщений(СвойстваСообщения.ИдентификаторСообщения,
										   СвойстваСообщения.ИдентификаторОбсуждения,
										   СвойстваСообщения.Текст,
										   СвойстваСообщения.Автор,
										   Ложь); 
		Возврат;
	КонецЕсли;
	
	ТокенДоступа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваСообщения.Автор, "Пр_ТокенДоступа", Истина);
	Если ПустаяСтрока(ТокенДоступа) Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка комментария Issue GitLab'"),
								 УровеньЖурналаРегистрации.Информация,
								 Метаданные.Справочники.Пользователи,
								 СвойстваСообщения.Автор,
								 НСтр("ru = 'Не удалось получить токен доступа пользователя'")); 
		ЛогированиеНеОтправленныхСообщений(СвойстваСообщения.ИдентификаторСообщения,
										   СвойстваСообщения.ИдентификаторОбсуждения,
										   СвойстваСообщения.Текст,
										   СвойстваСообщения.Автор,
										   Ложь); 
		Возврат;
	КонецЕсли;

	Попытка
						
		НомерПроекта = НомерПроектаЗаданияНаРаботу(ЗаданиеНаРаботу);  
		Если ПустаяСтрока(НомерПроекта) Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка комментария Issue GitLab'"),
									 УровеньЖурналаРегистрации.Информация,
									 Метаданные.Справочники.Проекты,,
									 НСтр("ru = 'Не удалось получить номер проекта GitLab'")); 
			ЛогированиеНеОтправленныхСообщений(СвойстваСообщения.ИдентификаторСообщения,
											   СвойстваСообщения.ИдентификаторОбсуждения,
											   СвойстваСообщения.Текст,
											   СвойстваСообщения.Автор,
											   Ложь); 
			Возврат;
		КонецЕсли;
		
		ИдентификаторIssue = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаданиеНаРаботу, "Пр_Идентификатор", Истина);
		Если ПустаяСтрока(НомерПроекта) Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка комментария Issue GitLab'"),
									 УровеньЖурналаРегистрации.Информация,
									 Метаданные.Документы.ЗаданиеНаРаботу,
									 ЗаданиеНаРаботу,
									 НСтр("ru = 'Не удалось получить номер Issue GitLab'")); 
			ЛогированиеНеОтправленныхСообщений(СвойстваСообщения.ИдентификаторСообщения,
											   СвойстваСообщения.ИдентификаторОбсуждения,
											   СвойстваСообщения.Текст,
											   СвойстваСообщения.Автор,
											   Ложь); 
			Возврат;
		КонецЕсли; 
		
		// Отправка файлов  
		МассивВложений = Новый Массив;
		
		ШаблонОбращения = СтрШаблон("api/v4/projects/%1/uploads", НомерПроекта);
		
		КартинкаИмяПараметра = "file";
		Для Каждого Вложение Из СвойстваСообщения.Вложения Цикл
			
			Поток = Вложение.ОткрытьПотокДляЧтения(); 
			ЧтениеПотока = Новый ЧтениеДанных(Поток);
			РезультатЧтения = ЧтениеПотока.Прочитать();
			ДвоичныеДанныеФайла = РезультатЧтения.ПолучитьДвоичныеДанные();
			
			ИмяФайлаРазложеное = СтрРазделить(Вложение.Наименование, ".", Ложь);
			РасширениеФайла = ИмяФайлаРазложеное[ИмяФайлаРазложеное.ВГраница()];
			ПутьКФайлу = ПолучитьИмяВременногоФайла(РасширениеФайла);
			ДвоичныеДанныеФайла.Записать(ПутьКФайлу);
			
			Разделитель = СтрЗаменить(Новый УникальныйИдентификатор(), "-", "");
			Тело = Новый ПотокВПамяти;
			ЗаписьДанных = Новый ЗаписьДанных(Тело,,, Символы.ВК + Символы.ПС, "");
			ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель);     
			ПутьКФайлу = СтрЗаменить(ПутьКФайлу, "\", "/");
			ЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""file""; filename=""/" + ПутьКФайлу + """");
			ЗаписьДанных.ЗаписатьСтроку(СформироватьСвойствоContentType(РасширениеФайла));
			ЗаписьДанных.ЗаписатьСтроку("");
			ЗаписьДанных.Записать(ДвоичныеДанныеФайла);
			ЗаписьДанных.ЗаписатьСтроку("");
			ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--");
			ЗаписьДанных.Закрыть();
			ДанныеТела = Тело.ЗакрытьИПолучитьДвоичныеДанные();
							
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Content-type", "multipart/form-data; boundary=" + Разделитель);  
			Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", ТокенДоступа));
			
			Запрос = Новый HTTPЗапрос(ШаблонОбращения, Заголовки);
			Запрос.УстановитьТелоИзДвоичныхДанных(ДанныеТела);
			
			Ответ = Соединение.ОтправитьДляОбработки(Запрос);
			СтруктураОтвета = ПрочитатьЗначениеJSON(Ответ.ПолучитьТелоКакСтроку());
			МассивВложений.Добавить(СтруктураОтвета.markdown);
			
		КонецЦикла; 
		
		
		// Отправка самого сообщения  
		СвойстваСообщения.Вставить("МассивВложений", МассивВложений);
		Тело = СформироватьТелоDiscussion(ЗаданиеНаРаботу, СвойстваСообщения); 
		Если ПустаяСтрока(Тело) Тогда  
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка комментария Issue GitLab'"),
									 УровеньЖурналаРегистрации.Информация,,,
									 НСтр("ru = 'Не удалось сформировать тело Discussion'"));  
			ЛогированиеНеОтправленныхСообщений(СвойстваСообщения.ИдентификаторСообщения,
											   СвойстваСообщения.ИдентификаторОбсуждения,
											   СвойстваСообщения.Текст,
											   СвойстваСообщения.Автор,
											   Ложь); 
			Возврат;
		КонецЕсли;  
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-type", "application/json");        
		Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", ТокенДоступа));
		ШаблонОбращения = СтрШаблон("api/v4/projects/%1/issues/%2/discussions", НомерПроекта, ИдентификаторIssue);
		Запрос = Новый HTTPЗапрос(ШаблонОбращения, Заголовки);

		Запрос.УстановитьТелоИзСтроки(Тело);
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		СтруктураОтвета = ПрочитатьЗначениеJSON(Ответ.ПолучитьТелоКакСтроку());
		
		Если Ответ.КодСостояния = 200 Или Ответ.КодСостояния = 201 Тогда  
			ЛогированиеНеОтправленныхСообщений(СвойстваСообщения.ИдентификаторСообщения,
											   СвойстваСообщения.ИдентификаторОбсуждения,
											   СвойстваСообщения.Текст,
											   СвойстваСообщения.Автор,
											   Истина); 
			Возврат;
		КонецЕсли;
		
		
		
	Исключение
		ЗаписьОшибокОтправки(НСтр("ru = 'Отправка комментария Issue GitLab'"),
						     ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
							 ЗаданиеНаРаботу); 
		ЛогированиеНеОтправленныхСообщений(СвойстваСообщения.ИдентификаторСообщения,
								   СвойстваСообщения.ИдентификаторОбсуждения,
								   СвойстваСообщения.Текст,
								   СвойстваСообщения.Автор,
								   Ложь); 
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка комментария Issue GitLab'"),
							 УровеньЖурналаРегистрации.Информация,
							 Метаданные.Документы.ЗаданиеНаРаботу,,
							 НСтр("ru = 'Конец операции'"));

КонецПроцедуры

// Формирует Автоматически свойство Content-Type в передачи через multipart-form 
// Для отправки вложений 
//
// Параметры:
// РасширениеБезТочки - Строка
//  
// Возвращаемое значение:
// Строка(0) - уже включает в себя текст Content-Type: [ТипКонтента]
//
Функция СформироватьСвойствоContentType(Знач РасширениеБезТочки) Экспорт

	ШаблонСтроки = "Content-Type: [ТипКонтента]";
	РасширениеФайлаСравнение = ВРег(СокрЛП(РасширениеБезТочки));
	
	ТипКонтента = "";
	Если РасширениеФайлаСравнение = "ZIP" Тогда
		ТипКонтента = "application/zip";	
	ИначеЕсли РасширениеФайлаСравнение = "OGG" Тогда 
		ТипКонтента = "application/ogg";	
	ИначеЕсли РасширениеФайлаСравнение = "PDF" Тогда 
		ТипКонтента = "application/pdf";	
	ИначеЕсли РасширениеФайлаСравнение = "XML" Тогда
		ТипКонтента = "application/xml";
	ИначеЕсли РасширениеФайлаСравнение = "DOC" Тогда
		ТипКонтента = "application/msword";
	ИначеЕсли РасширениеФайлаСравнение = "DOCX" Тогда
		ТипКонтента = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
	ИначеЕсли РасширениеФайлаСравнение = "XLSX" Тогда
		ТипКонтента = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
	ИначеЕсли РасширениеФайлаСравнение = "XLS" Тогда
		ТипКонтента = "application/vnd.ms-excel";
	ИначеЕсли РасширениеФайлаСравнение = "PPT" Тогда
		ТипКонтента = "application/vnd.ms-powerpoint";
	ИначеЕсли РасширениеФайлаСравнение = "PPTX" Тогда
		ТипКонтента = "application/vnd.openxmlformats-officedocument.presentationml.presentation";  
	ИначеЕсли РасширениеФайлаСравнение = "RAR" Тогда
		ТипКонтента = "application/x-rar-compressed";  
	ИначеЕсли РасширениеФайлаСравнение = "MP4" Тогда
		ТипКонтента = "audio/mp4";  
	ИначеЕсли РасширениеФайлаСравнение = "MPEG" Тогда
		ТипКонтента = "audio/mpeg";  
	ИначеЕсли РасширениеФайлаСравнение = "GIF" Тогда
		ТипКонтента = "image/gif";  
	ИначеЕсли РасширениеФайлаСравнение = "JPEG" Тогда
		ТипКонтента = "image/jpeg";  
	Иначе
		ТипКонтента = "multipart/mixed"; 
	КонецЕсли;
	
	СтрокаContentType = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
													 ШаблонСтроки,
													 Новый Структура("ТипКонтента",
													  				 ТипКонтента));
	
	Возврат СтрокаContentType;
	
КонецФункции

// Производит логирование не отправленных сообщений GitLab
//
// Параметры:
// ИдентификаторСообщения - ИдентификаторСообщенияСистемыВзаимодействия
// ИдентификаторОбсуждения - ИдентификаторОбсужденияСистемыВзаимодействия
// ТекстСообщения - Строка(500)
// Автор - СправочникСсылка.Пользователи
// ЭтоВложение - Булево
// Отправлено - Булево
//
Процедура ЛогированиеНеОтправленныхСообщений(Знач ИдентификаторСообщения, Знач ИдентификаторОбсуждения, Знач ТекстСообщения, Знач Автор, Знач Отправлено = Ложь) Экспорт
	
	МенеджерЗаписиЛогов = РегистрыСведений.Пр_НеотправленныеСообщенияGitLab.СоздатьМенеджерЗаписи();
	МенеджерЗаписиЛогов.ИдентификаторСообщения = Строка(ИдентификаторСообщения);
	МенеджерЗаписиЛогов.ИдентификаторОбсуждения = Строка(ИдентификаторОбсуждения);
	МенеджерЗаписиЛогов.Автор = Автор;
	МенеджерЗаписиЛогов.ТекстСообщения = Строка(ТекстСообщения); 
	
	Если Не Отправлено Тогда
		МенеджерЗаписиЛогов.Записать();
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Т.ИдентификаторСообщения КАК ИдентификаторС
			|ИЗ
			|	РегистрСведений.Пр_НеотправленныеСообщенияGitLab КАК Т
			|ГДЕ
			|	Т.ИдентификаторСообщения = &ИдентификаторСообщения"; 
		
		Запрос.УстановитьПараметр("ИдентификаторСообщения", Строка(ИдентификаторСообщения));
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			МенеджерЗаписиЛогов.Удалить();	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает и отправляет комментарий Issue GitLab
// 
// Параметры:
// Сообщение - СообщениеСистемыВзаимодействия
//
Процедура ПодготовитьИОтправитьКомментарийIssueGitLab(Знач Сообщение) Экспорт

	УстановитьПривилегированныйРежим(Истина);   
	
	ИдентификаторОбсуждения = Сообщение.Обсуждение;
	Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(ИдентификаторОбсуждения);
	КонтекстОбсуждения = Обсуждение.КонтекстОбсуждения;
	Если КонтекстОбсуждения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	КонтекстСсылка = ПолучитьСсылкуИзНавигационной(КонтекстОбсуждения.НавигационнаяСсылка);
	Если ТипЗнч(КонтекстСсылка) <> Тип("ДокументСсылка.ЗаданиеНаРаботу") Тогда
		Возврат;
	КонецЕсли;

	ИдентификаторБота = Пр_БотыСервер.ИдентификаторБотаGitLab();
	Если НЕ Сообщение.Получатели.Содержит(ИдентификаторБота) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторАвтора = Сообщение.Автор;
	ПользовательСистемыВзаимодействия = СистемаВзаимодействия.ПолучитьПользователя(ИдентификаторАвтора);
	ПользовательАвтораИБ = Пользователи.НайтиПоИдентификатору(ПользовательСистемыВзаимодействия.ИдентификаторПользователяИнформационнойБазы);
	Если ПользовательАвтораИБ = Неопределено
		 Или ТипЗнч(ПользовательАвтораИБ) <> Тип("СправочникСсылка.Пользователи")
	Тогда
		Возврат;
	КонецЕсли;
	
	ОтправитьСообщениеGitLab(КонтекстСсылка,
							 Новый Структура("ИдентификаторОбсуждения, ИдентификаторСообщения, Текст, Вложения, Автор, ДатаСообщения",
											 ИдентификаторОбсуждения,
											 Сообщение.Идентификатор,
											 Сообщение.Текст,
											 Сообщение.Вложения,
										 	 ПользовательАвтораИБ,
											 ТекущаяДатаСеанса()));
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Преобразовывает навигационную ссылку в обычную
//
// Параметры:
// НС - НавигационнаяСсылка
//
// Возвращаемое значение:
// ПроизвольныйТип
//
Функция ПолучитьСсылкуИзНавигационной(Знач НС) Экспорт
    
    ПерваяТочка = Найти(НС, "e1cib/data/");
    ВтораяТочка = Найти(НС, "?ref=");
    
    ПредставлениеТипа   = Сред(НС, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
    ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
    ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(НС, ВтораяТочка + 5));
    Возврат ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
   	 
КонецФункции

#КонецОбласти

#Область ОбработчикиРегламентныхЗаданий

// Регламентное задание Пр_ОтправкаОтложенныхIssue
//
Процедура Пр_ОтправкаОтложенныхIssue() Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка всех отложенных Issue GitLab'"),
							 УровеньЖурналаРегистрации.Информация,
							 Метаданные.Документы.ЗаданиеНаРаботу,,
							 НСтр("ru = 'Начало операции'"));
							 
	Узел = ПланыОбмена.Пр_ОбменGitLab.НайтиПоКоду("GitLab");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		 |	Т.Ссылка КАК ЗаданиеНаРаботу
		 |ИЗ
		 |	Документ.ЗаданиеНаРаботу.Изменения КАК Т
		 |ГДЕ
		 |	Т.Узел = &Узел";
	Запрос.УстановитьПараметр("Узел", Узел);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Истина);
	УстановитьОтключениеБезопасногоРежима(Истина);
	Пока Выборка.Следующий() Цикл
		
		ЗаданиеНаРаботу = Выборка.ЗаданиеНаРаботу;
		Если Не ЗначениеЗаполнено(ЗаданиеНаРаботу) Тогда
			Возврат;
		КонецЕсли; 
		
		Если ТипЗнч(ЗаданиеНаРаботу) <> Тип("ДокументСсылка.ЗаданиеНаРаботу") Тогда
			Возврат;
		КонецЕсли;
		
		АнализСтрока = НСтр("ru = 'Анализ'");
		Если Не АнализСтрока = Пр_КорпоративнаяСистемаGitLabВстраиваниеУНФСервер.СтатусЗаданияНаРаботу(ЗаданиеНаРаботу) Тогда 
			ЗаписьОшибокОтправки(НСтр("ru = 'Отправка Issue GitLab'"),
								 НСтр("ru = 'Статус задания на работу не равен статусу ""Анализ"". Операция отменена'"),
								 ЗаданиеНаРаботу);  
			Возврат;
		КонецЕсли;   
		       
		Если Не СтатусРегистрацииЗаданияНаРаботу(ЗаданиеНаРаботу) Тогда
			Возврат;	
		КонецЕсли;
		
		Попытка
			
			АдресСервера = АдресСервераGitLab();
			Соединение = Новый HTTPСоединение(АдресСервера);
			
			Если ПустаяСтрока(АдресСервера) Тогда
				ЗаписьОшибокОтправки(НСтр("ru = 'Отправка Issue GitLab'"),
									 НСтр("ru = 'Не заполнен адрес сервера GitLab'"),
									 ЗаданиеНаРаботу);
				Возврат;
			КонецЕсли;
			
			ТокенДоступа = ТокенДоступаПроектаЗаданияНаРаботу(ЗаданиеНаРаботу);
			Если ПустаяСтрока(ТокенДоступа) Тогда
				ЗаписьОшибокОтправки(НСтр("ru = 'Отправка Issue GitLab'"),
									 НСтр("ru = 'Не удалось получить токен доступа проекта"),
									 ЗаданиеНаРаботу);
				Возврат;
			КонецЕсли;
			
			Тело = СФормироватьТелоIssue(ЗаданиеНаРаботу); 
			Если ПустаяСтрока(Тело) Тогда  
				ЗаписьОшибокОтправки(НСтр("ru = 'Отправка Issue GitLab'"),
									 НСтр("ru = 'Не удалось сформировать тело Issue'"),
									 ЗаданиеНаРаботу);
				Возврат;
			КонецЕсли;  
			
			НомерПроекта = НомерПроектаЗаданияНаРаботу(ЗаданиеНаРаботу);  
			Если ПустаяСтрока(НомерПроекта) Тогда
				ЗаписьОшибокОтправки(НСтр("ru = 'Отправка Issue GitLab'"),
								     НСтр("ru = 'Не удалось получить проект задания на работу'"),
									 ЗаданиеНаРаботу); 
				Возврат;
			КонецЕсли;

			ШаблонОбращения = СтрШаблон("api/v4/projects/%1/issues", НомерПроекта);
			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Content-type", "application/json");
			Заголовки.Вставить("Authorization", ТокенДоступа);
			Запрос = Новый HTTPЗапрос(ШаблонОбращения, Заголовки);

			Запрос.УстановитьТелоИзСтроки(Тело);
			Ответ = Соединение.ОтправитьДляОбработки(Запрос);
			СтруктураОтвета = ПрочитатьЗначениеJSON(Ответ.ПолучитьТелоКакСтроку());
			
			Отправлено = ОбработатьОтветОтправкиIssue(ЗаданиеНаРаботу, СтруктураОтвета);
			
			Если Отправлено Тогда
				ЗафиксироватьОтправкуIssue(ЗаданиеНаРаботу);
			КонецЕсли;
			
		Исключение
			ЗаписьОшибокОтправки(НСтр("ru = 'Отправка Issue GitLab'"),
							     ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
								 ЗаданиеНаРаботу); 
		КонецПопытки;
	
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка всех отложенных Issue GitLab'"),
						 УровеньЖурналаРегистрации.Информация,
						 Метаданные.Документы.ЗаданиеНаРаботу,,
						 НСтр("ru = 'Конец операции'"));

КонецПроцедуры

// Регламентное задание Пр_ОбновлениеВсехIssue
//
Процедура Пр_ОбновлениеВсехIssue() Экспорт

	ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение всех Issue GitLab'"),
						 УровеньЖурналаРегистрации.Информация,
						 Метаданные.Документы.ЗаданиеНаРаботу,,
						 НСтр("ru = 'Начало операции'")); 
						 
	УстановитьПривилегированныйРежим(Истина);
	УстановитьОтключениеБезопасногоРежима(Истина);
	АдресСервера = АдресСервераGitLab();
	Соединение = Новый HTTPСоединение(АдресСервера);

	Если ПустаяСтрока(АдресСервера) Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение всех Issue GitLab'"),
							 УровеньЖурналаРегистрации.Ошибка,
							 Метаданные.Константы.Пр_АдресСервераGitLab,,
							 НСтр("ru = 'Не заполнен адрес сервера GitLab'")); 
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.Пр_НомерПроекта КАК НомерПроекта,
		|	""Bearer "" + Проекты.Пр_ТокенДоступа КАК ТокенДоступа,
		|	Проекты.Ссылка КАК Проект
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	СОКРЛП(Проекты.Пр_ТокенДоступа) <> """"
		|	И Проекты.Пр_НомерПроекта <> 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Если ПустаяСтрока(Выборка.ТокенДоступа)
			 Или Выборка.НомерПроекта = 0
		Тогда
						
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение всех Issue GitLab'"),
								 	 УровеньЖурналаРегистрации.Ошибка,
								 	 Метаданные.Справочники.Проекты,
									 Выборка.Проект,
								 	 НСтр("ru = 'Не заполнен токен доступа или номер проекта'"));
			Продолжить;
			
		КонецЕсли;	
							 
		ШаблонОбращения = СтрШаблон("api/v4/projects/%1/issues?state=opened", Выборка.НомерПроекта);
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-type", "application/json");
		Заголовки.Вставить("Authorization", Выборка.ТокенДоступа);
		ЗапросHTTP = Новый HTTPЗапрос(ШаблонОбращения, Заголовки);
		
		Ответ = Соединение.Получить(ЗапросHTTP);
		Ответ = ПрочитатьЗначениеJSON(Ответ.ПолучитьТелоКакСтроку());
		
		Если ТипЗнч(Ответ) = Тип("Массив")
			 И Ответ.Количество()
		Тогда
		
			Для Каждого Issue Из Ответ Цикл
				
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	Т.Ссылка КАК ЗаданиеНаРаботу
					|ИЗ
					|	Документ.ЗаданиеНаРаботу КАК Т
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК П
					|		ПО Т.Пр_Проект = П.Ссылка
					|ГДЕ
					|	Т.Пр_Идентификатор = &ИдентификаторIssue
					|	И П.Пр_НомерПроекта = &НомерПроекта";
				Запрос.УстановитьПараметр("ИдентификаторIssue", Строка(Issue.iid)); 
				Запрос.УстановитьПараметр("НомерПроекта", Issue.project_id);
				ВыборкаЗаданий = Запрос.Выполнить().Выбрать();
				
				Если ВыборкаЗаданий.Следующий() Тогда
					
					НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
					Попытка  
						
						ЗаданиеОбъект = ВыборкаЗаданий.ЗаданиеНаРаботу.ПолучитьОбъект();
					   	Блокировка = Новый БлокировкаДанных;
						ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаданиеНаРаботу");
						ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаЗаданий.ЗаданиеНаРаботу);
						ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
						Блокировка.Заблокировать(); 
						
						Если Issue.Свойство("time_stats") Тогда 
							Если Issue.time_stats.Свойство("time_estimate") Тогда
								ЗаданиеОбъект.Пр_ОценкаВGitLab = Issue.time_stats.time_estimate / 3600;
							КонецЕсли;
							Если Issue.time_stats.Свойство("total_time_spent") Тогда 
								ЗаданиеОбъект.Пр_ФактВGitLab = Issue.time_stats.total_time_spent / 3600;
							КонецЕсли;
						КонецЕсли;  
						
						Если ТипЗнч(Issue.assignees) = Тип("Массив")
							 И Issue.assignees.Количество()
						Тогда     
						
							Исполнитель = Issue.assignees[0].name;
							Запрос.Текст = 
								"ВЫБРАТЬ ПЕРВЫЕ 1
								|	Т.Ссылка КАК Сотрудник
								|ИЗ
								|	Справочник.Сотрудники КАК Т
								|ГДЕ
								|	НЕ Т.ПометкаУдаления
								|	И Т.Наименование = &Исполнитель
								|	И НЕ Т.Недействителен";
							Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
							ВыборкаСотрудник = Запрос.Выполнить().Выбрать();
							Если ВыборкаСотрудник.Следующий() Тогда
								ЗаданиеОбъект.Сотрудник = ВыборкаСотрудник.Сотрудник;
							Иначе
								СозданныйПользователь = СоздатьПользователяGitLabВИБ(Исполнитель);
								ЗаданиеОбъект.Сотрудник = СозданныйПользователь.Сотрудник;
							КонецЕсли;
							
						КонецЕсли;
						
						ЗаданиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
						ЗафиксироватьТранзакцию();
						
						Если Issue.Свойство("labels")
							 И ТипЗнч(Issue.labels) = Тип("Массив")
							 И Issue.labels.Количество()
						Тогда 
						
							Запрос.Текст = 
								"ВЫБРАТЬ
								|	З.Ссылка КАК Запись
								|ИЗ
								|	Справочник.ЗаписиКалендаряСотрудника КАК З
								|ГДЕ
								|	НЕ З.ПометкаУдаления
								|	И З.Источник = &ЗаданиеНаРаботуСсылка
								|;
								|
								|////////////////////////////////////////////////////////////////////////////////
								|ВЫБРАТЬ
								|	КолонкиКалендарейСотрудников.Ссылка КАК Метка
								|ИЗ
								|	Справочник.КолонкиКалендарейСотрудников КАК КолонкиКалендарейСотрудников
								|ГДЕ
								|	КолонкиКалендарейСотрудников.Владелец = &КалендарьСотрудника
								|	И КолонкиКалендарейСотрудников.Наименование = &ТекущаяМетка
								|	И НЕ КолонкиКалендарейСотрудников.ПометкаУдаления";
							
							Запрос.УстановитьПараметр("ТекущаяМетка", Issue.labels[0]); 
							Запрос.УстановитьПараметр("КалендарьСотрудника", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаЗаданий.ЗаданиеНаРаботу,
																   			 "КалендарьСотрудника"));
							Запрос.УстановитьПараметр("ЗаданиеНаРаботуСсылка", ВыборкаЗаданий.ЗаданиеНаРаботу);
							
							Результат = Запрос.ВыполнитьПакет();
							ВыборкаЗапись = Результат[0].Выбрать();
							ВыборкаМетка = Результат[1].Выбрать();
							Если ВыборкаЗапись.Следующий() И ВыборкаМетка.Следующий() Тогда
								
								НачатьТранзакцию();
								Попытка 
									ЗаписьОбъект = ВыборкаЗапись.Запись.ПолучитьОбъект();
									ЗаписьОбъект.Заблокировать();
									ЗаписьОбъект.КолонкаКалендаря = ВыборкаМетка.Метка;
									ЗаписьОбъект.Записать();
									ЗаписьОбъект.Разблокировать();
									
									Справочники.КолонкиКалендарейСотрудников.ПриИзмененииКолонкиЗаписи(ВыборкаЗапись.Запись, ВыборкаМетка.Метка);
									ЗафиксироватьТранзакцию(); 
									
								Исключение
									
									Если ТранзакцияАктивна() Тогда
										ОтменитьТранзакцию();
									КонецЕсли;
									ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение всех Issue GitLab'"),
														 	 УровеньЖурналаРегистрации.Ошибка,
														 	 Метаданные.Справочники.ЗаписиКалендаряСотрудника,
															 ВыборкаЗапись.Запись,
														 	 НСтр("ru = 'Не удалось обновить запись календаря'"));
								КонецПопытки;
								
							КонецЕсли;
							
						КонецЕсли;
						
					Исключение 
						
						Если ТранзакцияАктивна() Тогда
							ОтменитьТранзакцию();
						КонецЕсли;
						ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение всех Issue GitLab'"),
											 	 УровеньЖурналаРегистрации.Ошибка,
											 	 Метаданные.Документы.ЗаданиеНаРаботу,
												 ВыборкаЗаданий.ЗаданиеНаРаботу,
											 	 НСтр("ru = 'Не удалось заблокировать объекта'"));
					КонецПопытки;

					Продолжить;
					
				КонецЕсли;  
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение всех Issue GitLab'"),
									 	 УровеньЖурналаРегистрации.Ошибка,
									 	 Метаданные.Документы.ЗаданиеНаРаботу,,
									 	 СтрШаблон(НСтр("ru = 'Не удалось найти issue %1'"), Issue.iid)); 
				
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение всех Issue GitLab'"),
							 	 УровеньЖурналаРегистрации.Ошибка,
							 	 Метаданные.Документы.ЗаданиеНаРаботу,,
							 	 НСтр("ru = 'Не удалось разобрать ответ сервера'")); 

	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение всех Issue GitLab'"),
						 УровеньЖурналаРегистрации.Информация,
						 Метаданные.Документы.ЗаданиеНаРаботу,,
						 НСтр("ru = 'Конец операции'"));

КонецПроцедуры

// Обработка отправки отложенных сообщений
// Рег. задание - Пр_ОтправкаОтложенныхСообщений
//
Процедура Пр_ОтправкаОтложенныхСообщений() Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка отложенных комментариев Issue GitLab'"),
							 УровеньЖурналаРегистрации.Информация,,,
							 НСтр("ru = 'Начало операции'"));

	Если Не СистемаВзаимодействия.ИспользованиеДоступно() Тогда 
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка отложенных комментариев Issue GitLab'"),
								 УровеньЖурналаРегистрации.Ошибка,,,
								 НСтр("ru = 'Не доступно использование системы взимодействия'"));
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Т.ИдентификаторСообщения КАК ИдентификаторСообщения
		|ИЗ
		|	РегистрСведений.Пр_НеотправленныеСообщенияGitLab КАК Т";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Сообщение = СистемаВзаимодействия.ПолучитьСообщение(Новый ИдентификаторСообщенияСистемыВзаимодействия(Выборка.ИдентификаторСообщения));
		ПодготовитьИОтправитьКомментарийIssueGitLab(Сообщение);  
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Отправка отложенных комментариев Issue GitLab'"),
							 УровеньЖурналаРегистрации.Информация,,,
							 НСтр("ru = 'Конец операции'"));    
							 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиИнструментовОтладкиИнтеграции

// Проверяет наличие доступа к проекту GitLab
//
// Параметры:
// Проект - СправочникСсылка.Проекты
// 
// Возвращаемое значение:
// Булево
// 
Процедура ПроверитьДоступПроекта(Знач Проект) Экспорт
	
	АдресСервера = АдресСервераGitLab();  
	УстановитьПривилегированныйРежим(Истина);
	УстановитьОтключениеБезопасногоРежима(Истина);
	Соединение = Новый HTTPСоединение(АдресСервера);

	Если ПустаяСтрока(АдресСервера) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не заполнен адрес сервера GitLab'"));
		Возврат;
	КонецЕсли;

	ТокенДоступа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "Пр_ТокенДоступа", Истина);
	Если ПустаяСтрока(ТокенДоступа) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось получить токен доступа проекта"));
		Возврат;
	КонецЕсли;

	НомерПроекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "Пр_НомерПроекта", Истина);  
	Если ПустаяСтрока(НомерПроекта) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось получить проект задания на работу'")); 
		Возврат;
	КонецЕсли;

	ШаблонОбращения = СтрШаблон("api/v4/projects/%1", НомерПроекта);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-type", "application/json");
	Заголовки.Вставить("Authorization", ТокенДоступа);
	Запрос = Новый HTTPЗапрос(ШаблонОбращения, Заголовки);

	Ответ = Соединение.Получить(Запрос);
	ОбщегоНазначения.СообщитьПользователю(Ответ.ПолучитьТелоКакСтроку());
	УстановитьПривилегированныйРежим(Ложь); 
	
КонецПроцедуры        

#КонецОбласти

#КонецОбласти    

#Область СлужебныеПроцедурыИФункции

Процедура ТестКоммитыGitLab()
	Возврат;	
КонецПроцедуры

#КонецОбласти