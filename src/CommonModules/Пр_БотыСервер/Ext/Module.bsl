#Если Сервер Или ВнешнееСоединение Или ТолстыйКлиентОбычноеПриложение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет обновление ботов системы взаимодействия
// Рег. задание - Пр_ОбработкаБотов
//
Процедура Пр_ОбработкаБотов() Экспорт    
	
	Если СистемаВзаимодействия.ИспользованиеДоступно() Тогда
		СистемаВзаимодействия.ВыполнитьОбработкуБотов();
	КонецЕсли;    
	
КонецПроцедуры

// Инициирует отправку стартового сообщения всем в группы
//
Процедура СоздатьСообщениеГруппаЕжедневныйОпрос() Экспорт
	
	Если НЕ СистемаВзаимодействия.ИспользованиеДоступно() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПользователиСВ = СистемаВзаимодействия.ПолучитьПользователей(); 
	ИдентификаторБотаGitLab = Пр_БотыСервер.ИдентификаторБотаGitLab();
	БотОпросник = Пр_БотыСервер.ИдентификаторБотаМетаданныхGitLab();
	
	Если БотОпросник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборОбсуждений = Новый ОтборОбсужденийСистемыВзаимодействия;
	ОтборОбсуждений.Групповое = Истина;
	ОбсужденияСВ = СистемаВзаимодействия.ПолучитьОбсуждения(ОтборОбсуждений);
	УстановитьПривилегированныйРежим(Ложь);   
	
	СоответствиеОбсужденийПользователей = Новый Соответствие;
	
	Для Каждого ОбсуждениеСВ Из ОбсужденияСВ Цикл
		
		Если ОбсуждениеСВ.Заголовок <> НСтр("ru = 'Ежедневный опрос'") Тогда
			Продолжить;		
		КонецЕсли; 
		
		Для Каждого УчастникОбсуждения Из ОбсуждениеСВ.Участники Цикл
			Если УчастникОбсуждения <> ИдентификаторБотаGitLab
				 ИЛИ УчастникОбсуждения <> БотОпросник Тогда
				СоответствиеОбсужденийПользователей.Вставить(УчастникОбсуждения, ОбсуждениеСВ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Пользователь Из ПользователиСВ Цикл
		
		Если Пользователь.Идентификатор = ИдентификаторБотаGitLab
			 Или Пользователь.Идентификатор = БотОпросник Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементСоответствияОбсуждений = СоответствиеОбсужденийПользователей.Получить(Пользователь.Идентификатор); 
		Если ЭлементСоответствияОбсуждений = Неопределено Тогда
			
			НовоеОбсуждение = СистемаВзаимодействия.СоздатьОбсуждение();
			НовоеОбсуждение.Групповое = Истина;
			НовоеОбсуждение.Заголовок = НСтр("ru = 'Ежедневный опрос'");
			НовоеОбсуждение.Участники.Добавить(Пользователь.Идентификатор);
			НовоеОбсуждение.Участники.Добавить(БотОпросник);
			НовоеОбсуждение.Отображаемое = Истина;
			НовоеОбсуждение.Записать();
			
			ЭлементСоответствияОбсуждений = НовоеОбсуждение.Идентификатор;
		Иначе
			ЭлементСоответствияОбсуждений = ЭлементСоответствияОбсуждений.Идентификатор
		КонецЕсли;
		
		НовоеСообщение = СистемаВзаимодействия.СоздатьСообщение(ЭлементСоответствияОбсуждений);
		НовоеСообщение.Автор = БотОпросник;
		НовоеСообщение.Дата = ТекущаяДатаСеанса();
		НовоеСообщение.Текст = НСтр("ru = 'Что ты делал сегодня?'");
		НовоеСообщение.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Инициирует повтор опроса бота
//  
// Параметры:
// ИдентификаторОбсуждения - Строка
//
Процедура ИнициализацияПовтораОпроса(Знач ИдентификаторОбсуждения) Экспорт    
	
	СообщениеСВ = СистемаВзаимодействия.СоздатьСообщение(Новый ИдентификаторОбсужденияСистемыВзаимодействия(ИдентификаторОбсуждения));
	СообщениеСВ.Автор = Пр_БотыСервер.ИдентификаторБотаМетаданныхGitLab();
	СообщениеСВ.Текст = НСтр("ru = 'Что ты делал сегодня?'");
	СообщениеСВ.Записать(); 
	
КонецПроцедуры  

// Формирует документ ОтчетЗаДень
//
// Параметры:
// ИдентификаторОбсуждения - Строка
//
Процедура ЗавершитьОпрос(Знач ИдентификаторОбсуждения) Экспорт
	
	Если Не СистемаВзаимодействия.ИспользованиеДоступно() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Новый ИдентификаторОбсужденияСистемыВзаимодействия(ИдентификаторОбсуждения));
	ИдентификаторБота = Пр_БотыСервер.ИдентификаторБотаGitLab();
	ИдентификаторБотаМетаданные = Пр_БотыСервер.ИдентификаторБотаМетаданныхGitLab();
	УстановитьПривилегированныйРежим(Ложь);
	
	ИдентификаторУчастника = Неопределено;
	Для Каждого Участник Из Обсуждение.Участники Цикл
		Если Участник = ИдентификаторБота
			 Или Участник = ИдентификаторБотаМетаданные Тогда
			Продолжить;
		КонецЕсли;
		ИдентификаторУчастника = Участник; 
	КонецЦикла;
	
	Если ИдентификаторУчастника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторПользователя = СистемаВзаимодействия.ПолучитьПользователя(ИдентификаторУчастника).ИдентификаторПользователяИнформационнойБазы;
	Пользователь = Пользователи.НайтиПоИдентификатору(ИдентификаторПользователя); 
	Сотрудник = РегистрыСведений.СотрудникиПользователя.ПолучитьСотрудниковПользователя(Пользователь, Истина)[0]; 
	СтруктурнаяЕдиница = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТекущиеКадровыеДанныеСотрудниковУНФ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудниковУНФ КАК ТекущиеКадровыеДанныеСотрудниковУНФ
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудниковУНФ.Сотрудник = &Сотрудник";
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктурнаяЕдиница = Выборка.СтруктурнаяЕдиница;
	КонецЕсли;
	
	Если СтруктурнаяЕдиница = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пр_ЕжедневныйОпросСрезПоследних.Вопрос КАК Вопрос,
		|	Пр_ЕжедневныйОпросСрезПоследних.Ответ КАК Ответ
		|ИЗ
		|	РегистрСведений.Пр_ЕжедневныйОпрос.СрезПоследних(&Дата, Пользователь = &Пользователь) КАК Пр_ЕжедневныйОпросСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", КонецДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Опрос = Документы.Пр_ОтчетЗаДень.СоздатьДокумент();
	Опрос.Дата = НачалоДня(ТекущаяДатаСеанса()) + 3600 * 18;
	Опрос.Сотрудник = Сотрудник;
	Опрос.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Опрос.ОтветыНаВопросы.Добавить(), Выборка);		
	КонецЦикла;
	
	Опрос.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

// Получает идентификатор бота GitLab
//
// Возвращаемое значение:
// ИдентификаторПользователяСистемыВзаимодействия
//
Функция ИдентификаторБотаGitLab() Экспорт

	УстановитьПривилегированныйРежим(Истина);           
	ПользователиСистемы = СистемаВзаимодействия.ПолучитьПользователей(); 
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого ПользовательСВ Из ПользователиСистемы Цикл
		Если ПользовательСВ.Имя = НСтр("ru = 'GitLab'") Тогда
			Возврат ПользовательСВ.Идентификатор;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

// Получает бота связанного с пользователем
//
// Возвращаемое значение:
// ИдентификаторПользователяСистемыВзаимодействия
//
Функция ИдентификаторБотаМетаданныхGitLab() Экспорт
	
	БотыСВ = СистемаВзаимодействия.ПолучитьБотов();
	БотОпросник = Неопределено;
	Для Каждого БотСВ Из БотыСВ Цикл
		Если БотСВ.Метаданные = Метаданные.Боты.Пр_БотGitLab Тогда
			БотОпросник = БотСВ.Пользователь;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат БотОпросник;
	
КонецФункции

#КонецОбласти        

#КонецЕсли