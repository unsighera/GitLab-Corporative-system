#Если Сервер Или ВнешнееСоединение Или ТолстыйКлиентОбычноеПриложение Тогда
	
#Область ПрограммныйИнтерфейс

// Отправляет уведомления о просроке заданий
//
Процедура ОтправитьУведомленияОПросроченныхЗаданиях() Экспорт
	
	ПользовательАдминистратор = Пользователи.НайтиПоИмени("Администратор");
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Т.КалендарьСотрудника КАК КалендарьСотрудника,
		|	Т.МаксимальныйСрокАнализаДни КАК МаксимальныйСрокАнализаДни,
		|	Т.ПользовательУведомленийАнализ КАК ПользовательУведомленийАнализ,
		|	Т.ТекстУведомленийАнализ КАК ТекстУведомленийАнализ
		|ПОМЕСТИТЬ ВТ_УведомленияАнализ
		|ИЗ
		|	РегистрСведений.Пр_НастройкиУведомленийКалендарей КАК Т
		|ГДЕ
		|	Т.УведомлениеОДлительномАнализе
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КалендарьСотрудника
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Т.КалендарьСотрудника КАК КалендарьСотрудника,
		|	Т.УведомлениеОДлительнойРазработке КАК УведомлениеОДлительнойРазработке,
		|	Т.МаксимальныйСрокРазработкиДни КАК МаксимальныйСрокРазработкиДни,
		|	Т.ПользовательУведомленийРазработка КАК ПользовательУведомленийРазработка,
		|	Т.ТекстУведомленийВРазработке КАК ТекстУведомленийВРазработке
		|ПОМЕСТИТЬ ВТ_УведомленияВРаботе
		|ИЗ
		|	РегистрСведений.Пр_НастройкиУведомленийКалендарей КАК Т
		|ГДЕ
		|	Т.УведомлениеОДлительнойРазработке
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КалендарьСотрудника
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_УведомленияАнализ.КалендарьСотрудника КАК КалендарьСотрудника,
		|	ЗаписиКалендаряСотрудника.Ссылка КАК Источник,
		|	ЗаписиКалендаряСотрудника.КолонкаКалендаря КАК Статус,
		|	ВТ_УведомленияАнализ.МаксимальныйСрокАнализаДни КАК Срок_Анализ,
		|	ВТ_УведомленияАнализ.ПользовательУведомленийАнализ КАК ФИО_Анализ,
		|	ВТ_УведомленияАнализ.ТекстУведомленийАнализ КАК ТекстУведомления
		|ИЗ
		|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КолонкиКалендарейСотрудников КАК КолонкиКалендарейСотрудников
		|		ПО ЗаписиКалендаряСотрудника.КолонкаКалендаря = КолонкиКалендарейСотрудников.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УведомленияАнализ КАК ВТ_УведомленияАнализ
		|		ПО ЗаписиКалендаряСотрудника.Календарь = ВТ_УведомленияАнализ.КалендарьСотрудника
		|ГДЕ
		|	НЕ ЗаписиКалендаряСотрудника.Завершено
		|	И НЕ ЗаписиКалендаряСотрудника.ПометкаУдаления
		|	И КолонкиКалендарейСотрудников.Наименование = &ИмяКолонкиАнализ
		|	И РАЗНОСТЬДАТ(ЗаписиКалендаряСотрудника.Пр_ДатаПеремещения, &Дата, ДЕНЬ) > ВТ_УведомленияАнализ.МаксимальныйСрокАнализаДни
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_УведомленияАнализ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_УведомленияВРаботе.КалендарьСотрудника КАК КалендарьСотрудника,
		|	ЗаписиКалендаряСотрудника.Ссылка КАК Источник,
		|	ЗаписиКалендаряСотрудника.КолонкаКалендаря КАК Статус,
		|	ВТ_УведомленияВРаботе.МаксимальныйСрокРазработкиДни КАК Срок_ВРаботе,
		|	ВТ_УведомленияВРаботе.ПользовательУведомленийРазработка КАК ФИО_ВРаботе,
		|	ВТ_УведомленияВРаботе.ТекстУведомленийВРазработке КАК ТекстУведомления
		|ИЗ
		|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КолонкиКалендарейСотрудников КАК КолонкиКалендарейСотрудников
		|		ПО ЗаписиКалендаряСотрудника.КолонкаКалендаря = КолонкиКалендарейСотрудников.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УведомленияВРаботе КАК ВТ_УведомленияВРаботе
		|		ПО ЗаписиКалендаряСотрудника.Календарь = ВТ_УведомленияВРаботе.КалендарьСотрудника
		|ГДЕ
		|	НЕ ЗаписиКалендаряСотрудника.Завершено
		|	И НЕ ЗаписиКалендаряСотрудника.ПометкаУдаления
		|	И КолонкиКалендарейСотрудников.Наименование = &ИмяКолонкиВРаботе  
		|	И РАЗНОСТЬДАТ(ЗаписиКалендаряСотрудника.Пр_ДатаПеремещения, &Дата, ДЕНЬ) > ВТ_УведомленияВРаботе.МаксимальныйСрокРазработкиДни		
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_УведомленияВРаботе";                      
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ИмяКолонкиАнализ", НСтр("ru = 'Анализ'"));
	Запрос.УстановитьПараметр("ИмяКолонкиВРаботе", НСтр("ru = 'В работе'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УведомленияАнализ = МассивРезультатов[2].Выгрузить();
	УведомленияВРаботе = МассивРезультатов[4].Выгрузить();
		
	ЗаданияНаРаботуАнализ = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(УведомленияАнализ.ВыгрузитьКолонку("Источник"), "Источник", Истина);
	Для Каждого Уведомление Из УведомленияАнализ Цикл
		
		ОповещаемыйПользователь = Уведомление.ФИО_Анализ;
		Если Не ЗначениеЗаполнено(ОповещаемыйПользователь)
			 Или ОповещаемыйПользователь = Справочники.Пользователи.ПустаяСсылка()
		Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстУведомления = Уведомление.ТекстУведомления;
		НеобходимоЗаполнитьПоШаблону = СтрНайти(ТекстУведомления, "[Источник]")
									   Или СтрНайти(ТекстУведомления, "[Статус]")
									   Или СтрНайти(ТекстУведомления, "[Срок_Анализ]")
									   Или СтрНайти(ТекстУведомления, "[ФИО_Анализ]");
									   
		Если НеобходимоЗаполнитьПоШаблону Тогда
			
			СтруктураПараметров = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Уведомление);   
			СтруктураПараметров.Источник = ЗаданияНаРаботуАнализ[Уведомление.Источник].Источник;
			ТекстУведомления = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстУведомления, СтруктураПараметров);
			
		КонецЕсли;
		
		ОтправитьСообщениеВКолокольчик(ОповещаемыйПользователь, ТекстУведомления, СтруктураПараметров.Источник);
		
	КонецЦикла;   
	
	ЗаданияНаРаботуВРаботе = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(УведомленияВРаботе.ВыгрузитьКолонку("Источник"), "Источник", Истина);
	Для Каждого Уведомление Из УведомленияВРаботе Цикл
		
		ОповещаемыйПользователь = Уведомление.ФИО_ВРаботе;
		Если Не ЗначениеЗаполнено(ОповещаемыйПользователь)
			 Или ОповещаемыйПользователь = Справочники.Пользователи.ПустаяСсылка()
		Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстУведомления = Уведомление.ТекстУведомления;
		НеобходимоЗаполнитьПоШаблону = СтрНайти(ТекстУведомления, "[Источник]")
									   Или СтрНайти(ТекстУведомления, "[Статус]")
									   Или СтрНайти(ТекстУведомления, "[Срок_ВРаботе]")
									   Или СтрНайти(ТекстУведомления, "[ФИО_ВРаботе]");
									   
		Если НеобходимоЗаполнитьПоШаблону Тогда
			
			СтруктураПараметров = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Уведомление);   
			СтруктураПараметров.Источник = ЗаданияНаРаботуАнализ[Уведомление.Источник].Источник;
			ТекстУведомления = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстУведомления, СтруктураПараметров);
			
		КонецЕсли;
		
		ОтправитьСообщениеВКолокольчик(ОповещаемыйПользователь, ТекстУведомления, СтруктураПараметров.Источник);

	КонецЦикла;
		
КонецПроцедуры

Процедура ОтправитьСообщениеВКолокольчик(Пользователь, Сообщение, Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Сообщение) Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Уведомления просроченых заданий'"),
								 УровеньЖурналаРегистрации.Ошибка,
								 Метаданные.Документы.ЗаданиеНаРаботу,
								 Источник,
								 НСтр("ru = 'Не заполнен текст сообщения!'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник) Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Уведомления просроченых заданий'"),
								 УровеньЖурналаРегистрации.Ошибка,
								 Метаданные.Документы.ЗаданиеНаРаботу,
								 Источник,
								 НСтр("ru = 'Не заполнен источник оповещений!'"));
		Возврат;
	КонецЕсли;  
	
	Попытка
		МенеджерЗаписиСообщения = РегистрыСведений.Пр_ОповещенияПользователей.СоздатьМенеджерЗаписи();
		МенеджерЗаписиСообщения.Период = ТекущаяДатаСеанса();   
		МенеджерЗаписиСообщения.Источник = Источник;
		МенеджерЗаписиСообщения.Получатель = Пользователь;
		МенеджерЗаписиСообщения.ТекстСообщения = Сообщение;
		МенеджерЗаписиСообщения.Записать(Ложь);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Уведомления просроченых заданий'"),
								 УровеньЖурналаРегистрации.Ошибка,
								 Метаданные.Документы.ЗаданиеНаРаботу,
								 Источник,
								 НСтр("ru = 'Сообщение было отправлено ранее!'"));
	КонецПопытки;                 
							 
	УстановитьПривилегированныйРежим(Ложь);  
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли