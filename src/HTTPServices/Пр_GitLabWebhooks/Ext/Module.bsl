Функция UpdateIssueUpdateInfo(Запрос) 
	
	ТекстЗапроса = Запрос.ПолучитьТелоКакСтроку();
	СтруктураЗапроса = ПрочитатьЗначениеJSON(ТекстЗапроса);
	
	Если Не ТипЗнч(СтруктураЗапроса) = Тип("Структура") Тогда
		
		Ответ = Новый HTTPСервисОтвет(400); 
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Некорректное содержание отправленного тела.'"));
		Возврат Ответ;
		
	КонецЕсли;  
	
	Если Не СтруктураЗапроса.Свойство("object_attributes") Тогда
		
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Отсутствует поле object_attributes в отправленном теле.'"));
		Возврат Ответ;
		
	КонецЕсли;
	
	Если Не СтруктураЗапроса.object_attributes.Свойство("iid") Тогда
		
		Ответ = Новый HTTPСервисОтвет(400); 
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Запрос не содержит идентификационного номера Issue (iid).'"));
		Возврат Ответ;
		
	КонецЕсли;
	
	Если СтруктураЗапроса.object_attributes.Свойство("state")
		 И СтруктураЗапроса.object_attributes.state = "closed"
	Тогда
		Ответ = Новый HTTPСервисОтвет(200); 
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Issue закрыта. Обновление не произведено.'"));
		Возврат Ответ;
	КонецЕсли;

	Если Не СтруктураЗапроса.Свойство("changes") Тогда
		
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Отсутствуют изменения по Issue.'"));
		Возврат Ответ;
		
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаданиеНаРаботу.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаданиеНаРаботу КАК ЗаданиеНаРаботу
		|ГДЕ
		|	ЗаданиеНаРаботу.Пр_Идентификатор = &ИдентификаторIssue";
	
	Запрос.УстановитьПараметр("ИдентификаторIssue", Строка(СтруктураЗапроса.object_attributes.iid));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Не найдено issue с таким идентификационным номером.'"));
		Возврат Ответ;
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ЗаданиеНаРаботуСсылка = Выборка.Ссылка;
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Попытка   
		
		ЗаданиеОбъект = ЗаданиеНаРаботуСсылка.ПолучитьОбъект();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаданиеНаРаботу");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЗаданиеНаРаботуСсылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ЭтоОбновлениеИсполнителя = Ложь;
		ЭтоОбновлениеФактВремени = Ложь;
		ЭтоОбновлениеПланВремени = Ложь;
		
		Если СтруктураЗапроса.changes.Свойство("assignees") Тогда
			
			Исполнители = СтруктураЗапроса.changes.assignees.current;
			Если ТипЗнч(Исполнители) = Тип("Массив")
				 И Исполнители.Количество()
			Тогда  
			
				Исполнитель = Исполнители[0].name;
				Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	Т.Ссылка КАК Сотрудник
					|ИЗ
					|	Справочник.Сотрудники КАК Т
					|ГДЕ
					|	НЕ Т.ПометкаУдаления
					|	И Т.Наименование = &Исполнитель
					|	И НЕ Т.Недействителен";
				Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ЗаданиеОбъект.Сотрудник = Выборка.Сотрудник; 
					ЭтоОбновлениеИсполнителя = Истина; 
				Иначе                                              
					
					СозданныйПользователь = Пр_ОбменGitLabСервер.СоздатьПользователяGitLabВИБ(Исполнитель);
					ЗаданиеОбъект.Сотрудник = СозданныйПользователь.Сотрудник;
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;  
		
		Если СтруктураЗапроса.changes.Свойство("total_time_spent") Тогда
			
			ФактическоеВремя = СтруктураЗапроса.changes.total_time_spent.current;
			ЗаданиеОбъект.Пр_ФактВGitLab = ФактическоеВремя / 3600;
			ЭтоОбновлениеФактВремени = Истина;
			
		КонецЕсли;             
		
		Если СтруктураЗапроса.changes.Свойство("time_estimate") Тогда
			
			ФактическоеВремя = СтруктураЗапроса.changes.time_estimate.current;
			ЗаданиеОбъект.Пр_ОценкаВGitLab = ФактическоеВремя / 3600;
			ЭтоОбновлениеПланВремени = Истина;
			
		КонецЕсли;
		
		ЗаданиеОбъект.Записать(РежимЗаписиДокумента.Проведение); 
		ЗафиксироватьТранзакцию(); 
		
		Если ЭтоОбновлениеИсполнителя Тогда
			Ответ = Новый HTTPСервисОтвет(201);
			Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Исполнитель успешно обновлен'"));
			Возврат Ответ;   
		ИначеЕсли ЭтоОбновлениеПланВремени Тогда
			Ответ = Новый HTTPСервисОтвет(201);
			Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Плановое время успешно обновлено'"));
			Возврат Ответ;   
		ИначеЕсли ЭтоОбновлениеФактВремени Тогда
			Ответ = Новый HTTPСервисОтвет(201);
			Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Фактическое время успешно обновлено'"));
			Возврат Ответ;   
		КонецЕсли;

		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Не удалось редактирование Issue'"));
		Возврат Ответ;   

	КонецПопытки;
	
	Если СтруктураЗапроса.changes.Свойство("labels") Тогда
		
		Метки = СтруктураЗапроса.changes.labels.current;
		Если ТипЗнч(Метки) = Тип("Массив")
			 И Метки.Количество()
		Тогда
		
			МеткиGitLab = Пр_ОбменGitLabСервер.СуществующиеМетки();
			ТекущаяМетка = Неопределено;
			Для Каждого Метка Из Метки Цикл
				Если МеткиGitLab.Найти(Метка.title) Тогда
					ТекущаяМетка = Метка.title;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ТекущаяМетка <> Неопределено Тогда
	
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	З.Ссылка КАК Запись
					|ИЗ
					|	Справочник.ЗаписиКалендаряСотрудника КАК З
					|ГДЕ
					|	НЕ З.ПометкаУдаления
					|	И З.Источник = &ЗаданиеНаРаботуСсылка
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	КолонкиКалендарейСотрудников.Ссылка КАК Метка
					|ИЗ
					|	Справочник.КолонкиКалендарейСотрудников КАК КолонкиКалендарейСотрудников
					|ГДЕ
					|	КолонкиКалендарейСотрудников.Владелец = &КалендарьСотрудника
					|	И КолонкиКалендарейСотрудников.Наименование = &ТекущаяМетка
					|	И НЕ КолонкиКалендарейСотрудников.ПометкаУдаления";
				
				Запрос.УстановитьПараметр("ТекущаяМетка", ТекущаяМетка); 
				Запрос.УстановитьПараметр("КалендарьСотрудника", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаданиеНаРаботуСсылка,
																										   "КалендарьСотрудника"));
				Запрос.УстановитьПараметр("ЗаданиеНаРаботуСсылка", ЗаданиеНаРаботуСсылка);
				
				Результат = Запрос.ВыполнитьПакет();
				ВыборкаЗапись = Результат[0].Выбрать();
				ВыборкаМетка = Результат[1].Выбрать();
				Если ВыборкаЗапись.Следующий() И ВыборкаМетка.Следующий() Тогда
					
					НачатьТранзакцию();
					Попытка 
						ЗаписьОбъект = ВыборкаЗапись.Запись.ПолучитьОбъект();
						ЗаписьОбъект.Заблокировать();
						ЗаписьОбъект.КолонкаКалендаря = ВыборкаМетка.Метка;
						ЗаписьОбъект.Записать();
						ЗаписьОбъект.Разблокировать();
						
						Справочники.КолонкиКалендарейСотрудников.ПриИзмененииКолонкиЗаписи(ВыборкаЗапись.Запись, ВыборкаМетка.Метка);
						ЗафиксироватьТранзакцию(); 
						Ответ = Новый HTTPСервисОтвет(201);
						Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Метка успешно обновлена'"));
						Возврат Ответ;
						
					Исключение
						
						Если ТранзакцияАктивна() Тогда
							ОтменитьТранзакцию();
						КонецЕсли;
						Ответ = Новый HTTPСервисОтвет(500);
						Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Не удалось обновить метку'"));
						Возврат Ответ;   
						
					КонецПопытки;
					
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Ответ = Новый HTTPСервисОтвет(200);     
	Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Нет данных для обновления'"));
	Возврат Ответ;   

КонецФункции  

Функция GetMessageGetMes(Запрос)
	
	Если Не СистемаВзаимодействия.ИспользованиеДоступно() Тогда
		Ответ = Новый HTTPСервисОтвет(500);
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Система взаимодействия не зарегистрирована'"));
		Возврат Ответ;
	КонецЕсли;

	ТелоЗапроса = ПрочитатьЗначениеJSON(Запрос.ПолучитьТелоКакСтроку());
	
	Если Не ТелоЗапроса.Свойство("object_kind") Или Не ТелоЗапроса.Свойство("event_type") Тогда
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Тело должно содержать свойство object_kind и event_type'"));
		Возврат Ответ;
	КонецЕсли;
	
	Если Не ТелоЗапроса.object_kind = "note" Или Не ТелоЗапроса.event_type = "note" Тогда
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Свойства object_kind и event_type должны иметь значение note'"));
		Возврат Ответ;
	КонецЕсли; 
	
	Если Не ТелоЗапроса.Свойство("user") Тогда
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Тело должно содержать свойство user'"));
		Возврат Ответ;
	КонецЕсли;
	
	Если Не ТелоЗапроса.user.Свойство("name") Тогда
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Свойство user должно содержать свойство name'"));
		Возврат Ответ;
	КонецЕсли;     
	
	ПользовательИБ = Пользователи.НайтиПоИмени(ТелоЗапроса.user.name);
	
	Если ПользовательИБ = Справочники.Пользователи.ПустаяСсылка() Тогда
		ПользовательИБ = Пр_ОбменGitLabСервер.СоздатьПользователяGitLabВИБ(ТелоЗапроса.user.name).Пользователь;	
	КонецЕсли;     
	
	ПользовательИнформациннойБазы = Пользователи.НайтиПоСсылке(ПользовательИБ);
	
	УстановитьПривилегированныйРежим(Истина); 
	
	ОтборПользователей = Новый ОтборПользователейСистемыВзаимодействия;
	ОтборПользователей.Имя = ТелоЗапроса.user.name;
	ПользователиСистемыВзаимодействия = СистемаВзаимодействия.ПолучитьПользователей(ОтборПользователей);
	Если ПользователиСистемыВзаимодействия.Количество() Тогда
		ПользовательСВ = ПользователиСистемыВзаимодействия[0].Идентификатор;	
	Иначе
		ПользовательСВ = СистемаВзаимодействия.СоздатьПользователя(ПользовательИнформациннойБазы).Идентификатор;	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь); 
	
	Если Не ТелоЗапроса.Свойство("issue") Тогда
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Тело должно содержать свойство issue'"));
		Возврат Ответ;
	КонецЕсли;
	
	Если Не ТелоЗапроса.issue.Свойство("iid") Или Не ТелоЗапроса.issue.Свойство("project_id") Тогда
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Свойство issue должно содержать свойства iid и project_id'"));
		Возврат Ответ;
	КонецЕсли;
	
	Если Не ТелоЗапроса.Свойство("object_attributes") Тогда
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Тело должно содержать свойство object_attributes'"));
		Возврат Ответ;
	КонецЕсли;  
	
	Если Не ТелоЗапроса.object_attributes.Свойство("note") 
		 Или Не ТелоЗапроса.object_attributes.Свойство("noteable_type")
		 Или Не ТелоЗапроса.object_attributes.Свойство("action")  
	Тогда
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'object_attributes должно содержать свойства note, noteable_type и action'"));
		Возврат Ответ;
	КонецЕсли;
	
	Если ТелоЗапроса.object_attributes.action <> "create"
		 Или ТелоЗапроса.object_attributes.noteable_type <> "Issue"
	Тогда
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'object_attributes не содержит данных для создания или имеет другой тип действия'"));
		Возврат Ответ;
	КонецЕсли; 
	
	ТекстСообщения = ТелоЗапроса.object_attributes.note;
	ИдентификаторЗадания = Строка(ТелоЗапроса.issue.iid);
	НомерПроекта = ТелоЗапроса.issue.project_id;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.Ссылка КАК ЗаданиеНаРаботу
		|ИЗ
		|	Документ.ЗаданиеНаРаботу КАК Т
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК П
		|		ПО (Т.Пр_Проект = П.Ссылка)
		|ГДЕ
		|	Т.Пр_Идентификатор = &ИдентификаторЗадания
		|	И П.Пр_НомерПроекта = &НомерПроекта";
	Запрос.УстановитьПараметр("ИдентификаторЗадания", ИдентификаторЗадания);
	Запрос.УстановитьПараметр("НомерПроекта", НомерПроекта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаданиеНаРаботу = Выборка.ЗаданиеНаРаботу;	
	Иначе 
		УстановитьПривилегированныйРежим(Ложь);
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Не найдено документа ЗаданиеНаРаботу по данным тела запроса'"));
		Возврат Ответ;
	КонецЕсли;
	
	КонтекстОбсуждения =  Новый КонтекстОбсужденияСистемыВзаимодействия(ПолучитьНавигационнуюСсылку(ЗаданиеНаРаботу));
	ОтборОбсуждений = Новый ОтборОбсужденийСистемыВзаимодействия;
	ОтборОбсуждений.КонтекстноеОбсуждение = Истина;
	ОтборОбсуждений.КонтекстОбсуждения = КонтекстОбсуждения;
	
	ОбсужденияСВ = СистемаВзаимодействия.ПолучитьОбсуждения(ОтборОбсуждений);
	Если ОбсужденияСВ.Количество() Тогда
		ОбсуждениеСВ = ОбсужденияСВ[0].Идентификатор; 
	Иначе      
		НовоеОбсуждение = СистемаВзаимодействия.СоздатьОбсуждение();
		НовоеОбсуждение.КонтекстОбсуждения = КонтекстОбсуждения;
		НовоеОбсуждение.Записать();  
		
		ОбсуждениеСВ = НовоеОбсуждение.Идентификатор;	
	КонецЕсли;
	
	// Проверка последнего сообщения, т.к, иначе сработает отправка в GitLab 
	ОтборСообщений = Новый ОтборСообщенийСистемыВзаимодействия;
	ОтборСообщений.Обсуждение = ОбсуждениеСВ;
	
	СообщенияОбсуждения = СистемаВзаимодействия.ПолучитьСообщения(ОтборСообщений);
	ПоследнееСообщение = СообщенияОбсуждения[СообщенияОбсуждения.ВГраница()].Текст;  
	
	УстановитьПривилегированныйРежим(Ложь);             
	
	Если ТекстСообщения = ПоследнееСообщение Тогда
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Сообщение было обработано ранее'"));
		Возврат Ответ;
	КонецЕсли; 
	
	НовоеСообщение = СистемаВзаимодействия.СоздатьСообщение(ОбсуждениеСВ);
	НовоеСообщение.Автор = ПользовательСВ;
	НовоеСообщение.Дата = ТекущаяДатаСеанса();
	НовоеСообщение.Текст = ТекстСообщения;
	НовоеСообщение.Записать();
	
	Ответ = Новый HTTPСервисОтвет(201); 
	Ответ.УстановитьТелоИзСтроки(НСтр("ru = 'Сообщение было успешно доставлено'"));
	Возврат Ответ; 
	
КонецФункции

Функция TestPublicationTest(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
КонецФункции
