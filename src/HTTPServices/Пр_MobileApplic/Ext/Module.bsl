#Область ПрограммныйИнтерфейс

Функция GetProjectsGetData(Запрос) 
	
	Ответ = Новый HTTPСервисОтвет(200); 
	UUIDОбъекта = Новый УникальныйИдентификатор(Запрос.ПараметрыURL["uuid"]);  
	
	НеИспользоватьUUID = Ложь;
	
	Если UUIDОбъекта = ОбщегоНазначенияБТС.ПустойУникальныйИдентификатор() Тогда
		НеИспользоватьUUID = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ      
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) КАК УУИД,
		|	Т.Ссылка КАК Ссылка,
		|	СТРОКА(Т.Код) КАК Код,
		|	Т.Наименование КАК Наименование,
		|	СТРОКА(Т.ДатаНачала) КАК ДатаНачала,
		|	СТРОКА(Т.ДатаОкончания) КАК ДатаОкончания,
		|	Т.Контрагент КАК Контрагент,
		|	Т.Договор КАК Договор,
		|	Т.Комментарий КАК Комментарий,
		|	ВЫБОР
		|		КОГДА Т.Недействителен
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Недействителен
		|ИЗ
		|	Справочник.Проекты КАК Т
		|ГДЕ
		|	&НеИспользоватьUUID 
		|		ИЛИ УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) = &UUIDОбъекта
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код";
	
	Запрос.УстановитьПараметр("НеИспользоватьUUID", НеИспользоватьUUID);
	Запрос.УстановитьПараметр("UUIDОбъекта", UUIDОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗРезультат = РезультатЗапроса.Выгрузить();

	МассивДанных = Новый Массив;
	СтруктураДанных = Новый Структура("УУИД, Код, Наименование, ДатаНачала, ДатаОкончания, Контрагент, Договор, Комментарий, Недействителен");	

	ДанныеКонтрагентов = ЗначенияРеквизитовКонтрагентов(ТЗРезультат.ВыгрузитьКолонку("Контрагент"));
	ДанныеДоговоров = ЗначенияРеквизитовДоговоров(ТЗРезультат.ВыгрузитьКолонку("Договор")); 
		
	Для Каждого Строка Из ТЗРезультат Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураДанных, Строка);    
		СтруктураДанных.УУИД = Строка(Строка.УУИД); 
		
		СтруктураДанных.Контрагент = ДанныеКонтрагентов[Строка.Контрагент]; 
		СтруктураДанных.Договор = ДанныеДоговоров[Строка.Договор];											 		 
																	  
		МассивДанных.Добавить(Новый ФиксированнаяСтруктура(СтруктураДанных));
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь); 
	
	СтрокаJSON = ЗаписатьЗначениеJSON(МассивДанных);
	Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
	
	Ответ.Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат Ответ;            
	
КонецФункции

Функция GetCounterpartiesGetData(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200); 
	UUIDОбъекта = Новый УникальныйИдентификатор(Запрос.ПараметрыURL["uuid"]);  
	
	НеИспользоватьUUID = Ложь;
	
	Если UUIDОбъекта = ОбщегоНазначенияБТС.ПустойУникальныйИдентификатор() Тогда
		НеИспользоватьUUID = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) КАК УУИД,
		|	ЕСТЬNULL(Т.Код, """") КАК Код,
		|	ЕСТЬNULL(Т.Наименование, """") КАК Наименование,
		|	ЕСТЬNULL(Т.НаименованиеПолное, """") КАК НаименованиеПолное,
		|	ЕСТЬNULL(Т.ИНН, """") КАК ИНН,
		|	ЕСТЬNULL(Т.КПП, """") КАК КПП,
		|	ВЫБОР
		|		КОГДА Т.Покупатель
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Покупатель,
		|	ВЫБОР
		|		КОГДА Т.Поставщик
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Поставщик,
		|	ВЫБОР
		|		КОГДА Т.ПрочиеОтношения
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПрочиеОтношения
		|ИЗ
		|	Справочник.Контрагенты КАК Т
		|ГДЕ
		|	(&НеИспользоватьUUID
		|			ИЛИ УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) = &UUIDОбъекта)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.Код";
	
	Запрос.УстановитьПараметр("НеИспользоватьUUID", НеИспользоватьUUID);
	Запрос.УстановитьПараметр("UUIDОбъекта", UUIDОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗРезультат = РезультатЗапроса.Выгрузить();

	МассивДанных = Новый Массив;
		
	Для Каждого Строка Из ТЗРезультат Цикл
		
		СтруктураДанных = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
		СтруктураДанных.УУИД = Строка(Строка.УУИД);
																	  
		МассивДанных.Добавить(Новый ФиксированнаяСтруктура(СтруктураДанных));
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь); 
	
	СтрокаJSON = ЗаписатьЗначениеJSON(МассивДанных);
	Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
	
	Ответ.Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат Ответ;            

КонецФункции

Функция GetContractsGetData(Запрос)

	Ответ = Новый HTTPСервисОтвет(200); 
	UUIDОбъекта = Новый УникальныйИдентификатор(Запрос.ПараметрыURL["uuid"]);  
	
	НеИспользоватьUUID = Ложь;
	
	Если UUIDОбъекта = ОбщегоНазначенияБТС.ПустойУникальныйИдентификатор() Тогда
		НеИспользоватьUUID = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) КАК УУИД,
		|	ЕСТЬNULL(Т.Код, """") КАК Код,
		|	ЕСТЬNULL(Т.Наименование, """") КАК Наименование,
		|	Т.Организация КАК Организация,
		|	Т.ВидДоговора КАК ВидДоговора,
		|	ЕСТЬNULL(Т.НомерДоговора, """") КАК НомерДоговора,
		|	СТРОКА(Т.ДатаДоговора) КАК ДатаДоговора,
		|	Т.ВалютаРасчетов КАК ВалютаРасчетов,
		|	ВЫБОР
		|		КОГДА Т.ДоговорПодписан
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДоговорПодписан,
		|	ВЫБОР
		|		КОГДА Т.Недействителен
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Недействителен,
		|	ЕСТЬNULL(Т.Комментарий, """") КАК Комментарий
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК Т
		|ГДЕ
		|	(&НеИспользоватьUUID
		|			ИЛИ УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) = &UUIDОбъекта)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.Код";
	
	Запрос.УстановитьПараметр("НеИспользоватьUUID", НеИспользоватьUUID);
	Запрос.УстановитьПараметр("UUIDОбъекта", UUIDОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗРезультат = РезультатЗапроса.Выгрузить();
	
	РеквизитыОрганизаций = ЗначенияРеквизитовОрганизаций(ТЗРезультат.ВыгрузитьКолонку("Организация"));
	РеквизитыВалют = ЗначенияРеквизитовВалюты(ТЗРезультат.ВыгрузитьКолонку("ВалютаРасчетов"));
	
	МассивДанных = Новый Массив;
		
	Для Каждого Строка Из ТЗРезультат Цикл
		
		СтруктураДанных = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
		СтруктураДанных.УУИД = Строка(Строка.УУИД);      
		СтруктураДанных.ВидДоговора = Строка(Строка.ВидДоговора);
		СтруктураДанных.Организация = РеквизитыОрганизаций[Строка.Организация];
		СтруктураДанных.ВалютаРасчетов = РеквизитыВалют[Строка.ВалютаРасчетов];
																	  
		МассивДанных.Добавить(Новый ФиксированнаяСтруктура(СтруктураДанных));
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь); 
	
	СтрокаJSON = ЗаписатьЗначениеJSON(МассивДанных);
	Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
	
	Ответ.Заголовки.Вставить("Content-Type", "application/json");

	Возврат Ответ;            

КонецФункции

Функция GetOrganizationsGetData(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200); 
	UUIDОбъекта = Новый УникальныйИдентификатор(Запрос.ПараметрыURL["uuid"]);  
	
	НеИспользоватьUUID = Ложь;
	
	Если UUIDОбъекта = ОбщегоНазначенияБТС.ПустойУникальныйИдентификатор() Тогда
		НеИспользоватьUUID = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) КАК УУИД,
		|	ЕСТЬNULL(Т.Код, """") КАК Код,
		|	ЕСТЬNULL(Т.Наименование, """") КАК Наименование,
		|	ЕСТЬNULL(Т.НаименованиеПолное, """") КАК НаименованиеПолное,
		|	ЕСТЬNULL(Т.НаименованиеСокращенное, """") КАК НаименованиеСокращенное,
		|	Т.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ЕСТЬNULL(Т.ИНН, """") КАК ИНН,
		|	ЕСТЬNULL(Т.КПП, """") КАК КПП
		|ИЗ
		|	Справочник.Организации КАК Т
		|ГДЕ
		|	(&НеИспользоватьUUID
		|			ИЛИ УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) = &UUIDОбъекта)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.Код";
	
	Запрос.УстановитьПараметр("НеИспользоватьUUID", НеИспользоватьUUID);
	Запрос.УстановитьПараметр("UUIDОбъекта", UUIDОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗРезультат = РезультатЗапроса.Выгрузить();
	
	РеквизитыОрганизаций = ЗначенияРеквизитовОрганизаций(ТЗРезультат.ВыгрузитьКолонку("ГоловнаяОрганизация"));
	
	МассивДанных = Новый Массив;
		
	Для Каждого Строка Из ТЗРезультат Цикл
		
		СтруктураДанных = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
		СтруктураДанных.УУИД = Строка(Строка.УУИД);      
		СтруктураДанных.ГоловнаяОрганизация = РеквизитыОрганизаций[Строка.ГоловнаяОрганизация];
																	  
		МассивДанных.Добавить(Новый ФиксированнаяСтруктура(СтруктураДанных));
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь); 
	
	СтрокаJSON = ЗаписатьЗначениеJSON(МассивДанных);
	Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
	
	Ответ.Заголовки.Вставить("Content-Type", "application/json");

	Возврат Ответ;            

КонецФункции

Функция GetCurrenciesGetData(Запрос)

	Ответ = Новый HTTPСервисОтвет(200); 
	UUIDОбъекта = Новый УникальныйИдентификатор(Запрос.ПараметрыURL["uuid"]);  
	
	НеИспользоватьUUID = Ложь;
	
	Если UUIDОбъекта = ОбщегоНазначенияБТС.ПустойУникальныйИдентификатор() Тогда
		НеИспользоватьUUID = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) КАК УУИД,
		|	ЕСТЬNULL(Т.Код, """") КАК Код,
		|	ЕСТЬNULL(Т.Наименование, """") КАК Наименование,
		|	ЕСТЬNULL(Т.НаименованиеПолное, """") КАК НаименованиеПолное,
		|	Т.ОсновнаяВалюта КАК ОсновнаяВалюта
		|ИЗ
		|	Справочник.Валюты КАК Т
		|ГДЕ
		|	(&НеИспользоватьUUID
		|			ИЛИ УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) = &UUIDОбъекта)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.Код";
	
	Запрос.УстановитьПараметр("НеИспользоватьUUID", НеИспользоватьUUID);
	Запрос.УстановитьПараметр("UUIDОбъекта", UUIDОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗРезультат = РезультатЗапроса.Выгрузить();
	
	РеквизитыВалют = ЗначенияРеквизитовВалюты(ТЗРезультат.ВыгрузитьКолонку("ОсновнаяВалюта"));
	
	МассивДанных = Новый Массив;
		
	Для Каждого Строка Из ТЗРезультат Цикл
		
		СтруктураДанных = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
		СтруктураДанных.УУИД = Строка(Строка.УУИД);      
		СтруктураДанных.ОсновнаяВалюта = РеквизитыВалют[Строка.ОсновнаяВалюта];
																	  
		МассивДанных.Добавить(Новый ФиксированнаяСтруктура(СтруктураДанных));
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь); 
	
	СтрокаJSON = ЗаписатьЗначениеJSON(МассивДанных);
	Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
	
	Ответ.Заголовки.Вставить("Content-Type", "application/json");

	Возврат Ответ;            

КонецФункции

Функция GetIndividualsGetData(Запрос)  
	
	Ответ = Новый HTTPСервисОтвет(200); 
	UUIDОбъекта = Новый УникальныйИдентификатор(Запрос.ПараметрыURL["uuid"]);  
	
	НеИспользоватьUUID = Ложь;
	
	Если UUIDОбъекта = ОбщегоНазначенияБТС.ПустойУникальныйИдентификатор() Тогда
		НеИспользоватьUUID = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) КАК УУИД,
		|	ЕСТЬNULL(Т.Код, """") КАК Код,
		|	ЕСТЬNULL(Т.Наименование, """") КАК Наименование,
		|	ЕСТЬNULL(Т.СтраховойНомерПФР, """") КАК СтраховойНомерПФР,
		|	ЕСТЬNULL(Т.ФИО, """") КАК ФИО,
		|	ЕСТЬNULL(Т.ИНН, """") КАК ИНН,
		|	СТРОКА(Т.ДатаРождения) КАК ДатаРождения,
		|	Т.Пол КАК Пол,
		|	ЕСТЬNULL(Т.Фамилия, """") КАК Фамилия,
		|	ЕСТЬNULL(Т.Имя, """") КАК Имя,
		|	ЕСТЬNULL(Т.Отчество, """") КАК Отчество,
		|	ВЫБОР
		|		КОГДА Т.Недействителен
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Недействителен
		|ИЗ
		|	Справочник.ФизическиеЛица КАК Т
		|ГДЕ
		|	(&НеИспользоватьUUID
		|			ИЛИ УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) = &UUIDОбъекта)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.Код";
	
	Запрос.УстановитьПараметр("НеИспользоватьUUID", НеИспользоватьUUID);
	Запрос.УстановитьПараметр("UUIDОбъекта", UUIDОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗРезультат = РезультатЗапроса.Выгрузить();
		
	МассивДанных = Новый Массив;
		
	Для Каждого Строка Из ТЗРезультат Цикл
		
		СтруктураДанных = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
		СтруктураДанных.УУИД = Строка(Строка.УУИД);      
		СтруктураДанных.Пол = Строка(Строка.Пол);
																	  
		МассивДанных.Добавить(Новый ФиксированнаяСтруктура(СтруктураДанных));
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь); 
	
	СтрокаJSON = ЗаписатьЗначениеJSON(МассивДанных);
	Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
	
	Ответ.Заголовки.Вставить("Content-Type", "application/json");

	Возврат Ответ;            

КонецФункции

Функция GetStaffGetData(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200); 
	UUIDОбъекта = Новый УникальныйИдентификатор(Запрос.ПараметрыURL["uuid"]);  
	
	НеИспользоватьUUID = Ложь;
	
	Если UUIDОбъекта = ОбщегоНазначенияБТС.ПустойУникальныйИдентификатор() Тогда
		НеИспользоватьUUID = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) КАК УУИД,
		|	ЕСТЬNULL(Т.Код, """") КАК Код,
		|	ЕСТЬNULL(Т.Наименование, """") КАК Наименование,
		|	Т.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Т.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Т.ГоловнойСотрудник КАК ГоловнойСотрудник,
		|	Т.ТипЗанятости КАК ТипЗанятости,
		|	ВЫБОР
		|		КОГДА Т.Недействителен
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Недействителен
		|ИЗ
		|	Справочник.Сотрудники КАК Т
		|ГДЕ
		|	(&НеИспользоватьUUID
		|			ИЛИ УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) = &UUIDОбъекта)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.Код";
	
	Запрос.УстановитьПараметр("НеИспользоватьUUID", НеИспользоватьUUID);
	Запрос.УстановитьПараметр("UUIDОбъекта", UUIDОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗРезультат = РезультатЗапроса.Выгрузить();
	
	ЗначенияОрганизаций = ЗначенияРеквизитовОрганизаций(ТЗРезультат.ВыгрузитьКолонку("ГоловнаяОрганизация"));
	ЗначенияФизЛиц = ЗначенияРеквизитовФизическихЛиц(ТЗРезультат.ВыгрузитьКолонку("ФизическоеЛицо"));
	ЗначенияСотрудников = ЗначенияРеквизитовСотрудников(ТЗРезультат.ВыгрузитьКолонку("ГоловнойСотрудник"));
		
	МассивДанных = Новый Массив;
		
	Для Каждого Строка Из ТЗРезультат Цикл
		
		СтруктураДанных = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
		СтруктураДанных.УУИД = Строка(Строка.УУИД);       
		СтруктураДанных.ГоловнаяОрганизация = ЗначенияОрганизаций[Строка.ГоловнаяОрганизация];
		СтруктураДанных.ФизическоеЛицо = ЗначенияФизЛиц[Строка.ФизическоеЛицо];   
		СтруктураДанных.ГоловнойСотрудник = ЗначенияСотрудников[Строка.ГоловнойСотрудник];
		СтруктураДанных.ТипЗанятости = Строка(Строка.ТипЗанятости);
																	  
		МассивДанных.Добавить(Новый ФиксированнаяСтруктура(СтруктураДанных));
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь); 
	
	СтрокаJSON = ЗаписатьЗначениеJSON(МассивДанных);
	Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
	
	Ответ.Заголовки.Вставить("Content-Type", "application/json");

	Возврат Ответ;            

КонецФункции

Функция GetUsersGetData(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200); 
	UUIDОбъекта = Новый УникальныйИдентификатор(Запрос.ПараметрыURL["uuid"]);  
	
	НеИспользоватьUUID = Ложь;
	
	Если UUIDОбъекта = ОбщегоНазначенияБТС.ПустойУникальныйИдентификатор() Тогда
		НеИспользоватьUUID = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) КАК УУИД,
		|	ЕСТЬNULL(Т.Наименование, """") КАК Наименование,
		|	Т.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЕСТЬNULL(Т.Комментарий, """") КАК Комментарий,
		|	ЕСТЬNULL(Т.ИдентификаторПользователяИБ, """") КАК ИдентификаторПользователяИБ,
		|	ЕСТЬNULL(Т.Подразделение, """") КАК Подразделение,
		|	ВЫБОР
		|		КОГДА Т.Недействителен
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Недействителен
		|ИЗ
		|	Справочник.Пользователи КАК Т
		|ГДЕ
		|	(&НеИспользоватьUUID
		|			ИЛИ УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) = &UUIDОбъекта)";
	
	Запрос.УстановитьПараметр("НеИспользоватьUUID", НеИспользоватьUUID);
	Запрос.УстановитьПараметр("UUIDОбъекта", UUIDОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗРезультат = РезультатЗапроса.Выгрузить();
	
	ЗначенияФизЛиц = ЗначенияРеквизитовФизическихЛиц(ТЗРезультат.ВыгрузитьКолонку("ФизическоеЛицо"));
		
	МассивДанных = Новый Массив;
		
	Для Каждого Строка Из ТЗРезультат Цикл
		
		СтруктураДанных = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
		СтруктураДанных.УУИД = Строка(Строка.УУИД);       
		СтруктураДанных.ФизическоеЛицо = ЗначенияФизЛиц[Строка.ФизическоеЛицо];   
		СтруктураДанных.ИдентификаторПользователяИБ = Строка(Строка.ИдентификаторПользователяИБ);
		СтруктураДанных.Подразделение = Строка(Строка.Подразделение);
		
		МассивДанных.Добавить(Новый ФиксированнаяСтруктура(СтруктураДанных));
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь); 
	
	СтрокаJSON = ЗаписатьЗначениеJSON(МассивДанных);
	Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
	
	Ответ.Заголовки.Вставить("Content-Type", "application/json");

	Возврат Ответ;            

КонецФункции

Функция GetStaffsCalendarsGetData(Запрос)	
		
	Ответ = Новый HTTPСервисОтвет(200); 
	UUIDОбъекта = Новый УникальныйИдентификатор(Запрос.ПараметрыURL["uuid"]);  
	
	НеИспользоватьUUID = Ложь;
	
	Если UUIDОбъекта = ОбщегоНазначенияБТС.ПустойУникальныйИдентификатор() Тогда
		НеИспользоватьUUID = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) КАК УУИД,
		|	ЕСТЬNULL(Т.Код, """") КАК Код,
		|	ЕСТЬNULL(Т.Наименование, """") КАК Наименование,
		|	Т.ВладелецКалендаря КАК ВладелецКаледаря,
		|	Т.Пользователь КАК Пользователь,   
		|	ВЫБОР
		|		КОГДА Т.Недействителен
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Недействителен
		|ИЗ
		|	Справочник.КалендариСотрудников КАК Т
		|ГДЕ
		|	(&НеИспользоватьUUID
		|			ИЛИ УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) = &UUIDОбъекта)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.Код";
	
	Запрос.УстановитьПараметр("НеИспользоватьUUID", НеИспользоватьUUID);
	Запрос.УстановитьПараметр("UUIDОбъекта", UUIDОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗРезультат = РезультатЗапроса.Выгрузить();
	
	ЗначенияПользователей = ЗначенияРеквизитовПользователей(ТЗРезультат.ВыгрузитьКолонку("Пользователь"));
	ЗначенияСотрудников = ЗначенияРеквизитовСотрудников(ТЗРезультат.ВыгрузитьКолонку("ВладелецКаледаря"));
		
	МассивДанных = Новый Массив;
		
	Для Каждого Строка Из ТЗРезультат Цикл
		
		СтруктураДанных = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
		СтруктураДанных.УУИД = Строка(Строка.УУИД);       
		СтруктураДанных.ВладелецКаледаря = ЗначенияСотрудников[Строка.ВладелецКаледаря];
		СтруктураДанных.Пользователь = ЗначенияПользователей[Строка.Пользователь];
																	  
		МассивДанных.Добавить(Новый ФиксированнаяСтруктура(СтруктураДанных));
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь); 
	
	СтрокаJSON = ЗаписатьЗначениеJSON(МассивДанных);
	Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
	
	Ответ.Заголовки.Вставить("Content-Type", "application/json");

	Возврат Ответ;            

КонецФункции

Функция GetStructalUnitsGetData(Запрос)
		
	Ответ = Новый HTTPСервисОтвет(200); 
	UUIDОбъекта = Новый УникальныйИдентификатор(Запрос.ПараметрыURL["uuid"]);  
	
	НеИспользоватьUUID = Ложь;
	
	Если UUIDОбъекта = ОбщегоНазначенияБТС.ПустойУникальныйИдентификатор() Тогда
		НеИспользоватьUUID = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) КАК УУИД,
		|	ЕСТЬNULL(Т.Код, """") КАК Код,
		|	ЕСТЬNULL(Т.Наименование, """") КАК Наименование,
		|	ЕСТЬNULL(Т.НаименованиеПолное, """") КАК НаименованиеПолное,
		|	Т.Организация КАК Организация,  
		|	Т.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ЕСТЬNULL(Т.КПП, """") КАК КПП,   
		|	ВЫБОР
		|		КОГДА Т.Недействителен
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Недействителен
		|ИЗ
		|	Справочник.СтруктурныеЕдиницы КАК Т
		|ГДЕ
		|	(&НеИспользоватьUUID
		|			ИЛИ УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) = &UUIDОбъекта)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.Код";
	
	Запрос.УстановитьПараметр("НеИспользоватьUUID", НеИспользоватьUUID);
	Запрос.УстановитьПараметр("UUIDОбъекта", UUIDОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗРезультат = РезультатЗапроса.Выгрузить();
	
	ЗначенияОрганизаций = ЗначенияРеквизитовОрганизаций(ТЗРезультат.ВыгрузитьКолонку("Организация"));
	ЗначенийГоловныхОрганизаций = ЗначенияРеквизитовОрганизаций(ТЗРезультат.ВыгрузитьКолонку("ГоловнаяОрганизация"));
		
	МассивДанных = Новый Массив;
		
	Для Каждого Строка Из ТЗРезультат Цикл
		
		СтруктураДанных = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
		СтруктураДанных.УУИД = Строка(Строка.УУИД);       
		СтруктураДанных.Организация = ЗначенияОрганизаций[Строка.Организация];
		СтруктураДанных.ГоловнаяОрганизация = ЗначенийГоловныхОрганизаций[Строка.ГоловнаяОрганизация];
																	  
		МассивДанных.Добавить(Новый ФиксированнаяСтруктура(СтруктураДанных));
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь); 
	
	СтрокаJSON = ЗаписатьЗначениеJSON(МассивДанных);
	Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
	
	Ответ.Заголовки.Вставить("Content-Type", "application/json");

	Возврат Ответ;            

КонецФункции

Функция GetProductsGetData(Запрос)
		
	Ответ = Новый HTTPСервисОтвет(200); 
	UUIDОбъекта = Новый УникальныйИдентификатор(Запрос.ПараметрыURL["uuid"]);  
	
	НеИспользоватьUUID = Ложь;
	
	Если UUIDОбъекта = ОбщегоНазначенияБТС.ПустойУникальныйИдентификатор() Тогда
		НеИспользоватьUUID = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) КАК УУИД,
		|	ЕСТЬNULL(Т.Код, """") КАК Код,
		|	ЕСТЬNULL(Т.Наименование, """") КАК Наименование,
		|	Т.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ЕСТЬNULL(Т.Артикул, """") КАК Артикул,  
		|	ЕСТЬNULL(Т.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(Т.Комментарий, """") КАК Комментарий   
		|ИЗ
		|	Справочник.Номенклатура КАК Т
		|ГДЕ
		|	(&НеИспользоватьUUID
		|			ИЛИ УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) = &UUIDОбъекта)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.Код";
	
	Запрос.УстановитьПараметр("НеИспользоватьUUID", НеИспользоватьUUID);
	Запрос.УстановитьПараметр("UUIDОбъекта", UUIDОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗРезультат = РезультатЗапроса.Выгрузить();
	
	ЗначенияЕдиницИзмерений = ЗначенияРеквизитовЕдиницИзмерений(ТЗРезультат.ВыгрузитьКолонку("ЕдиницаИзмерения"));
		
	МассивДанных = Новый Массив;
		
	Для Каждого Строка Из ТЗРезультат Цикл
		
		СтруктураДанных = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
		СтруктураДанных.УУИД = Строка(Строка.УУИД);        
		СтруктураДанных.ТипНоменклатуры = Строка(Строка.ТипНоменклатуры);
		СтруктураДанных.ЕдиницаИзмерения = ЗначенияЕдиницИзмерений[Строка.ЕдиницаИзмерения];
																	  
		МассивДанных.Добавить(Новый ФиксированнаяСтруктура(СтруктураДанных));
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь); 
	
	СтрокаJSON = ЗаписатьЗначениеJSON(МассивДанных);
	Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
	
	Ответ.Заголовки.Вставить("Content-Type", "application/json");

	Возврат Ответ;            

КонецФункции

Функция GetUnitsOfMeasurementGetData(Запрос)

	Ответ = Новый HTTPСервисОтвет(200); 
	UUIDОбъекта = Новый УникальныйИдентификатор(Запрос.ПараметрыURL["uuid"]);  
	
	НеИспользоватьUUID = Ложь;
	
	Если UUIDОбъекта = ОбщегоНазначенияБТС.ПустойУникальныйИдентификатор() Тогда
		НеИспользоватьUUID = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) КАК УУИД,
		|	ЕСТЬNULL(Т.Код, """") КАК Код,
		|	ЕСТЬNULL(Т.Наименование, """") КАК Наименование,
		|	ЕСТЬNULL(Т.НаименованиеПолное, """") КАК НаименованиеПолное,
		|	ЕСТЬNULL(Т.МеждународноеСокращение, """") КАК МеждународноеСокращение,  
		|	Т.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины
		|ИЗ
		|	Справочник.КлассификаторЕдиницИзмерения КАК Т
		|ГДЕ
		|	(&НеИспользоватьUUID
		|			ИЛИ УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) = &UUIDОбъекта)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.Код";
	
	Запрос.УстановитьПараметр("НеИспользоватьUUID", НеИспользоватьUUID);
	Запрос.УстановитьПараметр("UUIDОбъекта", UUIDОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗРезультат = РезультатЗапроса.Выгрузить();
			
	МассивДанных = Новый Массив;
		
	Для Каждого Строка Из ТЗРезультат Цикл
		
		СтруктураДанных = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
		СтруктураДанных.УУИД = Строка(Строка.УУИД);        
		СтруктураДанных.ТипИзмеряемойВеличины = Строка(Строка.ТипИзмеряемойВеличины);
																	  
		МассивДанных.Добавить(Новый ФиксированнаяСтруктура(СтруктураДанных));
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь); 
	
	СтрокаJSON = ЗаписатьЗначениеJSON(МассивДанных);
	Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
	
	Ответ.Заголовки.Вставить("Content-Type", "application/json");

	Возврат Ответ;            

КонецФункции

Функция GetTasksGetData(Запрос)

	Ответ = Новый HTTPСервисОтвет(200); 
	UUIDОбъекта = Новый УникальныйИдентификатор(Запрос.ПараметрыURL["uuid"]);  
	
	НеИспользоватьUUID = Ложь;
	
	Если UUIDОбъекта = ОбщегоНазначенияБТС.ПустойУникальныйИдентификатор() Тогда
		НеИспользоватьUUID = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) КАК УУИД,      
		|	СТРОКА(Т.Ссылка.Дата) КАК Дата,
		|	ЕСТЬNULL(Т.Ссылка.Номер, """") КАК Номер,                             
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка.Организация) КАК Организация,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка.Пр_Проект) КАК Проект,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка.СтруктурнаяЕдиница) КАК СтруктурнаяЕдиница,                   
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка.Сотрудник) КАК Сотрудник,
		|	ЕСТЬNULL(З.Ссылка.КолонкаКалендаря, ""Необработанное"") КАК СтатусЗадания,
		|	ЕСТЬNULL(Т.Ссылка.Пр_Идентификатор, """") КАК Идентификатор,  
		|	ЕСТЬNULL(Т.Ссылка.Пр_ОценкаВGitLab, 0) КАК ОценкаВGitLab,
		|	ЕСТЬNULL(Т.Ссылка.Пр_ФактВGitLab, 0) КАК ФактВGitLab,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка.Автор) КАК Автор,            
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Заказчик) КАК Заказчик,
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(Т.Цена, 0) КАК Цена,
		|	ЕСТЬNULL(Т.Сумма, 0) КАК Сумма,
		|	ЕСТЬNULL(Т.Комментарий, """") КАК Описание,
		|	ЕСТЬNULL(Т.Ссылка.СуммаДокумента, 0) КАК СуммаДокумента,
		|	ЕСТЬNULL(Т.Ссылка.Комментарий, """") КАК Комментарий
		|ИЗ
		|	Документ.ЗаданиеНаРаботу.Работы КАК Т 
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗаписиКалендаряСотрудника КАК З
		|		ПО Т.Ссылка = З.Источник
		|		
		|ГДЕ
		|	(&НеИспользоватьUUID
		|			ИЛИ УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Т.Ссылка) = &UUIDОбъекта)
		|	И СОКРЛП(Т.Ссылка.Пр_Идентификатор) <> """"
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.Ссылка.Дата";
	
	Запрос.УстановитьПараметр("НеИспользоватьUUID", НеИспользоватьUUID);
	Запрос.УстановитьПараметр("UUIDОбъекта", UUIDОбъекта);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТЗРезультат = РезультатЗапроса.Выгрузить();
			
	МассивДанных = Новый Массив;
		
	Для Каждого Строка Из ТЗРезультат Цикл
		
		СтруктураДанных = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
		СтруктураДанных.УУИД = Строка(Строка.УУИД);        
		СтруктураДанных.Организация = Новый ФиксированнаяСтруктура("УУИД, ПолноеИмя", 
									  Строка(Строка.Организация), НСтр("ru = 'Справочник.Организации'"));
		СтруктураДанных.Проект = Новый ФиксированнаяСтруктура("УУИД, ПолноеИмя", 
								 Строка(Строка.Проект), НСтр("ru = 'Справочник.Проекты'"));
		СтруктураДанных.СтруктурнаяЕдиница = Новый ФиксированнаяСтруктура("УУИД, ПолноеИмя",
											 Строка(Строка.СтруктурнаяЕдиница), НСтр("ru = 'Справочник.СтруктурныеЕдиницы'"));
		СтруктураДанных.Сотрудник = Новый ФиксированнаяСтруктура("УУИД, ПолноеИмя", 
									Строка(Строка.Сотрудник), НСтр("ru = 'Справочник.Сотрудники'"));
		СтруктураДанных.СтатусЗадания = Строка(Строка.СтатусЗадания);
		СтруктураДанных.Автор = Новый ФиксированнаяСтруктура("УУИД, ПолноеИмя", 
								Строка(Строка.Автор), НСтр("ru = 'Справочник.Пользователи'"));
		СтруктураДанных.Заказчик = Новый ФиксированнаяСтруктура("УУИД, ПолноеИмя",
								   Строка(Строка.Заказчик), НСтр("ru = 'Справочник.ДоговорыКонтрагентов'"));
		СтруктураДанных.Номенклатура = Новый ФиксированнаяСтруктура("УУИД, ПолноеИмя", 
									   Строка(Строка.Номенклатура), НСтр("ru = 'Справочник.ДоговорыКонтрагентов'"));
																	  
		МассивДанных.Добавить(Новый ФиксированнаяСтруктура(СтруктураДанных));
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь); 
	
	СтрокаJSON = ЗаписатьЗначениеJSON(МассивДанных);
	Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
	
	Ответ.Заголовки.Вставить("Content-Type", "application/json");

	Возврат Ответ;            

КонецФункции

#КонецОбласти  

#Область СлужебныеПроцедурыИФункции

Функция ЗначенияРеквизитовКонтрагентов(Знач Контрагенты)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияРеквизитовКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Контрагенты,
	"Код, Наименование, НаименованиеПолное, ИНН, КПП, Покупатель, Поставщик, ПрочиеОтношения");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеКонтрагентов = Новый Соответствие;
	
	Для Каждого Контрагент Из Контрагенты Цикл
		
		Если Контрагент = Справочники.Контрагенты.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;			

		СтруктураКонтрагента = Новый ФиксированнаяСтруктура("УУИД, ПолноеИмя, Код, Наименование, НаименованиеПолное, ИНН, КПП, Покупатель, Поставщик, ПрочиеОтношения",
															Строка(Контрагент.УникальныйИдентификатор()),  
															Контрагент.Метаданные().ПолноеИмя(), 
															ЗначенияРеквизитовКонтрагента[Контрагент].Код,
															ЗначенияРеквизитовКонтрагента[Контрагент].Наименование,
															ЗначенияРеквизитовКонтрагента[Контрагент].НаименованиеПолное,
															ЗначенияРеквизитовКонтрагента[Контрагент].ИНН,
															ЗначенияРеквизитовКонтрагента[Контрагент].КПП,
															?(ЗначенияРеквизитовКонтрагента[Контрагент].Покупатель, 1, 0),
															?(ЗначенияРеквизитовКонтрагента[Контрагент].Поставщик, 1, 0),
															?(ЗначенияРеквизитовКонтрагента[Контрагент].ПрочиеОтношения, 1, 0));    
															
         ДанныеКонтрагентов.Вставить(Контрагент, СтруктураКонтрагента);
		 
	КонецЦикла;
	
	Возврат ДанныеКонтрагентов;
	
КонецФункции

Функция ЗначенияРеквизитовДоговоров(Знач Договоры)

	УстановитьПривилегированныйРежим(Истина);  
	
	ЗначенияРеквизитовДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Договоры,
	"Код, Наименование, Организация, ВидДоговора, НомерДоговора, ДатаДоговора, ВалютаРасчетов, ДоговорПодписан, Недействителен, Комментарий");
	
	УстановитьПривилегированныйРежим(Ложь); 
	
	ДанныеДоговоров = Новый Соответствие;
	
	Для Каждого Договор Из Договоры Цикл
		
		Если Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;			
		
		МассивОрганизации = Новый Массив;
		МассивОрганизации.Добавить(ЗначенияРеквизитовДоговора[Договор].Организация);
		МассивВалют = Новый Массив;
		МассивВалют.Добавить(ЗначенияРеквизитовДоговора[Договор].ВалютаРасчетов);
		
		СтруктураДоговора = Новый ФиксированнаяСтруктура("УУИД, ПолноеИмя, Код, Наименование, Организация, ВидДоговора, НомерДоговора, ДатаДоговора, ВалютаРасчетов, ДоговорПодписан, Недействителен, Комментарий",
														 Строка(Договор.УникальныйИдентификатор()), 
														 Договор.Метаданные().ПолноеИмя(),  
														 ЗначенияРеквизитовДоговора[Договор].Код,
														 ЗначенияРеквизитовДоговора[Договор].Наименование,
														 ЗначенияРеквизитовОрганизаций(МассивОрганизации)[ЗначенияРеквизитовДоговора[Договор].Организация],
														 Строка(ЗначенияРеквизитовДоговора[Договор].ВидДоговора),
														 ЗначенияРеквизитовДоговора[Договор].НомерДоговора,
														 Строка(ЗначенияРеквизитовДоговора[Договор].ДатаДоговора),
														 ЗначенияРеквизитовВалюты(МассивВалют)[ЗначенияРеквизитовДоговора[Договор].ВалютаРасчетов],
														 ?(ЗначенияРеквизитовДоговора[Договор].ДоговорПодписан, 1, 0),
														 ?(ЗначенияРеквизитовДоговора[Договор].Недействителен, 1, 0),
														 ЗначенияРеквизитовДоговора[Договор].Комментарий); 
													
		ДанныеДоговоров.Вставить(Договор, СтруктураДоговора);   
		
	КонецЦикла;
	
	Возврат ДанныеДоговоров;
	
КонецФункции 

Функция ЗначенияРеквизитовОрганизаций(Знач Организации)

	ДанныеОрганизаций = Новый Соответствие;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Организации,
	"Код, Наименование, НаименованиеПолное, НаименованиеСокращенное, ГоловнаяОрганизация, ИНН, КПП");   
	
	УстановитьПривилегированныйРежим(Ложь);
		
	Для Каждого Организация Из Организации Цикл
		
		Если Организация = Справочники.Организации.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;	
		
		СтруктураОрганизации = Новый ФиксированнаяСтруктура("УУИД, ПолноеИмя, Код, Наименование, НаименованиеПолное, НаименованиеСокращенное, ГоловнаяОрганизация, ИНН, КПП",
															Строка(Организация.УникальныйИдентификатор()), 
															Организация.Метаданные().ПолноеИмя(), 
															Строка(ЗначенияОрганизации[Организация].Код),
															Строка(ЗначенияОрганизации[Организация].Наименование),
															Строка(ЗначенияОрганизации[Организация].НаименованиеПолное),
															Строка(ЗначенияОрганизации[Организация].НаименованиеСокращенное),
															Строка(ЗначенияОрганизации[Организация].ГоловнаяОрганизация.УникальныйИдентификатор()),
															Строка(ЗначенияОрганизации[Организация].ИНН),
															Строка(ЗначенияОрганизации[Организация].КПП));  
															
		ДанныеОрганизаций.Вставить(Организация, СтруктураОрганизации);
		
	КонецЦикла;
	
	Возврат ДанныеОрганизаций;
	
КонецФункции

Функция ЗначенияРеквизитовВалюты(Знач Валюты)

	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияВалют = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Валюты,
	"Код, Наименование, НаименованиеПолное, ОсновнаяВалюта");   
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеВалют = Новый Соответствие;
	
	Для Каждого Валюта Из Валюты Цикл
		
		Если Валюта = Справочники.Валюты.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураВалюты = Новый ФиксированнаяСтруктура("УУИД, ПолноеИмя, Код, Наименование, НаименованиеПолное, ОсновнаяВалюта",
															Строка(Валюта.УникальныйИдентификатор()), 
															Валюта.Метаданные().ПолноеИмя(),
															Строка(ЗначенияВалют[Валюта].Код),
															Строка(ЗначенияВалют[Валюта].Наименование),
															Строка(ЗначенияВалют[Валюта].НаименованиеПолное),
															Строка(ЗначенияВалют[Валюта].ОсновнаяВалюта.УникальныйИдентификатор()));  
															
		ДанныеВалют.Вставить(Валюта, СтруктураВалюты);
		
	КонецЦикла;
	
	Возврат ДанныеВалют;

КонецФункции

Функция ЗначенияРеквизитовФизическихЛиц(Знач ФизическиеЛица)

	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияФизЛиц = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ФизическиеЛица,
	"Код, Наименование, СтраховойНомерПФР, ФИО, ИНН, ДатаРождения, Пол, Фамилия, Имя, Отчество, Недействителен");   
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеФизЛиц = Новый Соответствие;
	
	Для Каждого ФизЛицо Из ФизическиеЛица Цикл
		
		Если ФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураФизическогоЛица = Новый ФиксированнаяСтруктура("УУИД, ПолноеИмя, Код, Наименование, СтраховойНомерПФР, ФИО, ИНН, ДатаРождения, Пол, Фамилия, Имя, Отчество, Недействителен",
															Строка(ФизЛицо.УникальныйИдентификатор()), 
															ФизЛицо.Метаданные().ПолноеИмя(),
															Строка(ЗначенияФизЛиц[ФизЛицо].Код),
															Строка(ЗначенияФизЛиц[ФизЛицо].Наименование),
															Строка(ЗначенияФизЛиц[ФизЛицо].СтраховойНомерПФР),
															Строка(ЗначенияФизЛиц[ФизЛицо].ФИО),
															Строка(ЗначенияФизЛиц[ФизЛицо].ИНН),
															Строка(ЗначенияФизЛиц[ФизЛицо].ДатаРождения),
															Строка(ЗначенияФизЛиц[ФизЛицо].Пол),
															Строка(ЗначенияФизЛиц[ФизЛицо].Фамилия),
															Строка(ЗначенияФизЛиц[ФизЛицо].Имя),
															Строка(ЗначенияФизЛиц[ФизЛицо].Отчество),
															?(ЗначенияФизЛиц[ФизЛицо].Недействителен, 1, 0));  
															
		ДанныеФизЛиц.Вставить(ФизЛицо, СтруктураФизическогоЛица);
		
	КонецЦикла;
	
	Возврат ДанныеФизЛиц;

КонецФункции

Функция ЗначенияРеквизитовСотрудников(Знач Сотрудники)

	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияСотрудников = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Сотрудники,
	"Код, Наименование, ГоловнаяОрганизация, ФизическоеЛицо, ГоловнойСотрудник, ТипЗанятости, Недействителен");   
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеСотрудников = Новый Соответствие;
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		
		Если Сотрудник = Справочники.Сотрудники.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСотрудника = Новый ФиксированнаяСтруктура("УУИД, ПолноеИмя, Код, Наименование, ГоловнаяОрганизация, ФизическоеЛицо, ГоловнойСотрудник, ТипЗанятости, Недействителен",
														   Строка(Сотрудник.УникальныйИдентификатор()), 
														   Сотрудник.Метаданные().ПолноеИмя(),
														   Строка(ЗначенияСотрудников[Сотрудник].Код),
														   Строка(ЗначенияСотрудников[Сотрудник].Наименование),
														   Строка(ЗначенияСотрудников[Сотрудник].ГоловнаяОрганизация.УникальныйИдентификатор()),
														   Строка(ЗначенияСотрудников[Сотрудник].ФизическоеЛицо.УникальныйИдентификатор()),
														   Строка(ЗначенияСотрудников[Сотрудник].ГоловнойСотрудник.УникальныйИдентификатор()),
														   Строка(ЗначенияСотрудников[Сотрудник].ТипЗанятости),
														   ?(ЗначенияСотрудников[Сотрудник].Недействителен, 1, 0));  
															
		ДанныеСотрудников.Вставить(Сотрудник, СтруктураСотрудника);
		
	КонецЦикла;
	
	Возврат ДанныеСотрудников;

КонецФункции

Функция ЗначенияРеквизитовПользователей(Знач Пользователи)

	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияПользователей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Пользователи,
	"Наименование, ФизическоеЛицо, Комментарий, ИдентификаторПользователяИБ, Недействителен, Подразделение");   
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеПользователей = Новый Соответствие;
	
	Для Каждого Пользователь Из Пользователи Цикл
		
		Если Пользователь = Справочники.Пользователи.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПользователя = Новый ФиксированнаяСтруктура("УУИД, ПолноеИмя, Наименование, ФизическоеЛицо, Комментарий, ИдентификаторПользователяИБ, Подразделение, Недействителен",
														   Строка(Пользователь.УникальныйИдентификатор()), 
														   Пользователь.Метаданные().ПолноеИмя(),
														   Строка(ЗначенияПользователей[Пользователь].Наименование),
														   Строка(ЗначенияПользователей[Пользователь].ФизическоеЛицо.УникальныйИдентификатор()),
														   Строка(ЗначенияПользователей[Пользователь].Комментарий),
														   Строка(ЗначенияПользователей[Пользователь].ИдентификаторПользователяИБ),
														   Строка(ЗначенияПользователей[Пользователь].Подразделение),
														   ?(ЗначенияПользователей[Пользователь].Недействителен, 1, 0));  
															
		ДанныеПользователей.Вставить(Пользователь, СтруктураПользователя);
		
	КонецЦикла;
	
	Возврат ДанныеПользователей;

КонецФункции

Функция ЗначенияРеквизитовЕдиницИзмерений(Знач ЕдиницыИзмерения)

	УстановитьПривилегированныйРежим(Истина);
	
	ЗначенияЕдиницИзмерений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ЕдиницыИзмерения,
	"Код, Наименование, НаименованиеПолное, МеждународноеСокращение, ТипИзмеряемойВеличины");   
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеЕдиниц = Новый Соответствие;
	
	Для Каждого ЕдиницаИзмерения Из ЕдиницыИзмерения Цикл
		
		Если ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураЕдиницы = Новый ФиксированнаяСтруктура("УУИД, ПолноеИмя, Код, Наименование, НаименованиеПолное, МеждународноеСокращение, ТипИзмеряемойВеличины",
														   Строка(ЕдиницаИзмерения.УникальныйИдентификатор()), 
														   ЕдиницаИзмерения.Метаданные().ПолноеИмя(), 
														   Строка(ЗначенияЕдиницИзмерений[ЕдиницаИзмерения].Код),
														   Строка(ЗначенияЕдиницИзмерений[ЕдиницаИзмерения].Наименование),
														   Строка(ЗначенияЕдиницИзмерений[ЕдиницаИзмерения].НаименованиеПолное),
														   Строка(ЗначенияЕдиницИзмерений[ЕдиницаИзмерения].МеждународноеСокращение),
														   Строка(ЗначенияЕдиницИзмерений[ЕдиницаИзмерения].ТипИзмеряемойВеличины));  
															
		ДанныеЕдиниц.Вставить(ЕдиницаИзмерения, СтруктураЕдиницы);
		
	КонецЦикла;
	
	Возврат ДанныеЕдиниц;

КонецФункции

#КонецОбласти
